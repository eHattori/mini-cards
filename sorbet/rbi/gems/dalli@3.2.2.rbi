# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `dalli` gem.
# Please instead update this file by running `bin/tapioca gem dalli`.

module Dalli
  class << self
    def default_logger; end
    def logger; end
    def logger=(logger); end
    def rails_logger; end
  end
end

# Dalli::Client is the main class which developers will use to interact with
# Memcached.
class Dalli::Client
  # Dalli::Client is the main class which developers will use to interact with
  # the memcached server.  Usage:
  #
  #   Dalli::Client.new(['localhost:11211:10',
  #                      'cache-2.example.com:11211:5',
  #                      '192.168.0.1:22122:5',
  #                      '/var/run/memcached/socket'],
  #                     failover: true, expires_in: 300)
  #
  # servers is an Array of "host:port:weight" where weight allows you to distribute cache unevenly.
  # Both weight and port are optional.  If you pass in nil, Dalli will use the <tt>MEMCACHE_SERVERS</tt>
  # environment variable or default to 'localhost:11211' if it is not present.  Dalli also supports
  # the ability to connect to Memcached on localhost through a UNIX socket.  To use this functionality,
  # use a full pathname (beginning with a slash character '/') in place of the "host:port" pair in
  # the server configuration.
  #
  # Options:
  # - :namespace - prepend each key with this value to provide simple namespacing.
  # - :failover - if a server is down, look for and store values on another server in the ring.  Default: true.
  # - :threadsafe - ensure that only one thread is actively using a socket at a time. Default: true.
  # - :expires_in - default TTL in seconds if you do not pass TTL as a parameter to an individual operation, defaults
  #                 to 0 or forever.
  # - :compress - if true Dalli will compress values larger than compression_min_size bytes before sending them
  #               to memcached.  Default: true.
  # - :compression_min_size - the minimum size (in bytes) for which Dalli will compress values sent to Memcached.
  #                           Defaults to 4K.
  # - :serializer - defaults to Marshal
  # - :compressor - defaults to Dalli::Compressor, a Zlib-based implementation
  # - :cache_nils - defaults to false, if true Dalli will not treat cached nil values as 'not found' for
  #                 #fetch operations.
  # - :digest_class - defaults to Digest::MD5, allows you to pass in an object that responds to the hexdigest method,
  #                   useful for injecting a FIPS compliant hash object.
  # - :protocol - one of either :binary or :meta, defaulting to :binary.  This sets the protocol that Dalli uses
  #               to communicate with memcached.
  #
  # @return [Client] a new instance of Client
  def initialize(servers = T.unsafe(nil), options = T.unsafe(nil)); end

  # Conditionally add a key/value pair, if the key does not already exist
  # on the server.  Returns truthy if the operation succeeded.
  def add(key, value, ttl = T.unsafe(nil), req_options = T.unsafe(nil)); end

  # Make sure memcache servers are alive, or raise an Dalli::RingError
  def alive!; end

  # Append value to the value already stored on the server for 'key'.
  # Appending only works for values stored with :raw => true.
  def append(key, value); end

  def cache_nils; end

  # compare and swap values using optimistic locking.
  # Fetch the existing value for key.
  # If it exists, yield the value to the block.
  # Add the block's return value as the new value for the key.
  # Add will fail if someone else changed the value.
  #
  # Returns:
  # - nil if the key did not exist.
  # - false if the value was changed by someone else.
  # - true if the value was successfully updated.
  def cas(key, ttl = T.unsafe(nil), req_options = T.unsafe(nil), &block); end

  # like #cas, but will yield to the block whether or not the value
  # already exists.
  #
  # Returns:
  # - false if the value was changed by someone else.
  # - true if the value was successfully updated.
  def cas!(key, ttl = T.unsafe(nil), req_options = T.unsafe(nil), &block); end

  # Close our connection to each server.
  # If you perform another operation after this, the connections will be re-established.
  def close; end

  # Decr subtracts the given amount from the counter on the memcached server.
  # Amt must be a positive integer value.
  #
  # memcached counters are unsigned and cannot hold negative values.  Calling
  # decr on a counter which is 0 will just return 0.
  #
  # If default is nil, the counter must already exist or the operation
  # will fail and will return nil.  Otherwise this method will return
  # the new value for the counter.
  #
  # Note that the ttl will only apply if the counter does not already
  # exist.  To decrease an existing counter and update its TTL, use
  # #cas.
  #
  # If the value already exists, it must have been set with raw: true
  def decr(key, amt = T.unsafe(nil), ttl = T.unsafe(nil), default = T.unsafe(nil)); end

  def delete(key); end

  # Delete a key/value pair, verifying existing CAS.
  # Returns true if succeeded, and falsy otherwise.
  def delete_cas(key, cas = T.unsafe(nil)); end

  # Fetch the value associated with the key.
  # If a value is found, then it is returned.
  #
  # If a value is not found and no block is given, then nil is returned.
  #
  # If a value is not found (or if the found value is nil and :cache_nils is false)
  # and a block is given, the block will be invoked and its return value
  # written to the cache and returned.
  def fetch(key, ttl = T.unsafe(nil), req_options = T.unsafe(nil)); end

  # Flush the memcached server, at 'delay' seconds in the future.
  # Delay defaults to zero seconds, which means an immediate flush.
  def flush(delay = T.unsafe(nil)); end

  # Flush the memcached server, at 'delay' seconds in the future.
  # Delay defaults to zero seconds, which means an immediate flush.
  def flush_all(delay = T.unsafe(nil)); end

  # Gat (get and touch) fetch an item and simultaneously update its expiration time.
  #
  # If a value is not found, then +nil+ is returned.
  def gat(key, ttl = T.unsafe(nil)); end

  # Get the value associated with the key.
  # If a value is not found, then +nil+ is returned.
  def get(key, req_options = T.unsafe(nil)); end

  # Get the value and CAS ID associated with the key.  If a block is provided,
  # value and CAS will be passed to the block.
  #
  # @yield [value, cas]
  def get_cas(key); end

  # Fetch multiple keys efficiently.
  # If a block is given, yields key/value pairs one at a time.
  # Otherwise returns a hash of { 'key' => 'value', 'key2' => 'value1' }
  def get_multi(*keys); end

  # Fetch multiple keys efficiently, including available metadata such as CAS.
  # If a block is given, yields key/data pairs one a time.  Data is an array:
  # [value, cas_id]
  # If no block is given, returns a hash of
  #   { 'key' => [value, cas_id] }
  def get_multi_cas(*keys); end

  # Incr adds the given amount to the counter on the memcached server.
  # Amt must be a positive integer value.
  #
  # If default is nil, the counter must already exist or the operation
  # will fail and will return nil.  Otherwise this method will return
  # the new value for the counter.
  #
  # Note that the ttl will only apply if the counter does not already
  # exist.  To increase an existing counter and update its TTL, use
  # #cas.
  #
  # If the value already exists, it must have been set with raw: true
  def incr(key, amt = T.unsafe(nil), ttl = T.unsafe(nil), default = T.unsafe(nil)); end

  # Turn on quiet aka noreply support for a number of
  # memcached operations.
  #
  # All relevant operations within this block will be effectively
  # pipelined as Dalli will use 'quiet' versions.  The invoked methods
  # will all return nil, rather than their usual response.  Method
  # latency will be substantially lower, as the caller will not be
  # blocking on responses.
  #
  # Currently supports storage (set, add, replace, append, prepend),
  # arithmetic (incr, decr), flush and delete operations.  Use of
  # unsupported operations inside a block will raise an error.
  #
  # Any error replies will be discarded at the end of the block, and
  # Dalli client methods invoked inside the block will not
  # have return values
  def multi; end

  # @return [Boolean]
  def not_found?(val); end

  # Prepend value to the value already stored on the server for 'key'.
  # Prepending only works for values stored with :raw => true.
  def prepend(key, value); end

  # Turn on quiet aka noreply support for a number of
  # memcached operations.
  #
  # All relevant operations within this block will be effectively
  # pipelined as Dalli will use 'quiet' versions.  The invoked methods
  # will all return nil, rather than their usual response.  Method
  # latency will be substantially lower, as the caller will not be
  # blocking on responses.
  #
  # Currently supports storage (set, add, replace, append, prepend),
  # arithmetic (incr, decr), flush and delete operations.  Use of
  # unsupported operations inside a block will raise an error.
  #
  # Any error replies will be discarded at the end of the block, and
  # Dalli client methods invoked inside the block will not
  # have return values
  def quiet; end

  # Conditionally add a key/value pair, only if the key already exists
  # on the server.  Returns truthy if the operation succeeded.
  def replace(key, value, ttl = T.unsafe(nil), req_options = T.unsafe(nil)); end

  # Conditionally add a key/value pair, verifying existing CAS, only if the
  # key already exists on the server.  Returns the new CAS value if the
  # operation succeeded, or falsy otherwise.
  def replace_cas(key, value, cas, ttl = T.unsafe(nil), req_options = T.unsafe(nil)); end

  # Close our connection to each server.
  # If you perform another operation after this, the connections will be re-established.
  def reset; end

  # Reset stats for each server.
  def reset_stats; end

  def set(key, value, ttl = T.unsafe(nil), req_options = T.unsafe(nil)); end

  # Set the key-value pair, verifying existing CAS.
  # Returns the resulting CAS value if succeeded, and falsy otherwise.
  def set_cas(key, value, cas, ttl = T.unsafe(nil), req_options = T.unsafe(nil)); end

  # Collect the stats for each server.
  # You can optionally pass a type including :items, :slabs or :settings to get specific stats
  # Returns a hash like { 'hostname:port' => { 'stat1' => 'value1', ... }, 'hostname2:port' => { ... } }
  def stats(type = T.unsafe(nil)); end

  # Touch updates expiration time for a given key.
  #
  # Returns true if key exists, otherwise nil.
  def touch(key, ttl = T.unsafe(nil)); end

  # Version of the memcache servers.
  def version; end

  # Stub method so a bare Dalli client can pretend to be a connection pool.
  #
  # @yield [_self]
  # @yieldparam _self [Dalli::Client] the object that the method was called on
  def with; end

  private

  def cas_core(key, always_set, ttl = T.unsafe(nil), req_options = T.unsafe(nil)); end

  # @raise [ArgumentError]
  def check_positive!(amt); end

  def normalize_options(opts); end

  # Chokepoint method for memcached methods with a key argument.
  # Validates the key, resolves the key to the appropriate server
  # instance, and invokes the memcached method on the appropriate
  # server.
  #
  # This method also forces retries on network errors - when
  # a particular memcached instance becomes unreachable, or the
  # operational times out.
  def perform(*all_args); end

  def pipelined_getter; end
  def protocol_implementation; end
  def ring; end

  # Uses the argument TTL or the client-wide default.  Ensures
  # that the value is an integer
  def ttl_or_default(ttl); end
end

Dalli::Client::ALLOWED_STAT_KEYS = T.let(T.unsafe(nil), Array)
Dalli::Client::CACHE_NILS = T.let(T.unsafe(nil), Hash)

# Default compressor used by Dalli, that uses
# Zlib DEFLATE to compress data.
class Dalli::Compressor
  class << self
    def compress(data); end
    def decompress(data); end
  end
end

# generic error
class Dalli::DalliError < ::RuntimeError; end

# Alternate compressor for Dalli, that uses
# Gzip.  Gzip adds a checksum to each compressed
# entry.
class Dalli::GzipCompressor
  class << self
    def compress(data); end
    def decompress(data); end
  end
end

# This class manages and validates keys sent to Memcached, ensuring
# that they meet Memcached key length requirements, and supporting
# the implementation of optional namespaces on a per-Dalli client
# basis.
class Dalli::KeyManager
  # @return [KeyManager] a new instance of KeyManager
  def initialize(client_options); end

  def digest_class; end

  # Returns the key with the namespace prefixed, if a namespace is
  # defined.  Otherwise just returns the key
  def key_with_namespace(key); end

  def key_without_namespace(key); end

  # Returns the value of attribute namespace.
  def namespace; end

  def namespace_from_options; end
  def namespace_regexp; end
  def prefix_length(digest); end

  # Produces a truncated key, if the raw key is longer than the maximum allowed
  # length.  The truncated key is produced by generating a hex digest
  # of the key, and appending that to a truncated section of the key.
  def truncated_key(key); end

  # @raise [ArgumentError]
  def validate_digest_class_option(opts); end

  # Validates the key, and transforms as needed.
  #
  # If the key is nil or empty, raises ArgumentError.  Whitespace
  # characters are allowed for historical reasons, but likely shouldn't
  # be used.
  # If the key (with namespace) is shorter than the memcached maximum
  # allowed key length, just returns the argument key
  # Otherwise computes a "truncated" key that uses a truncated prefix
  # combined with a 32-byte hex digest of the whole key.
  #
  # @raise [ArgumentError]
  def validate_key(key); end
end

Dalli::KeyManager::DEFAULTS = T.let(T.unsafe(nil), Hash)
Dalli::KeyManager::MAX_KEY_LENGTH = T.let(T.unsafe(nil), Integer)
Dalli::KeyManager::NAMESPACE_SEPARATOR = T.let(T.unsafe(nil), String)
Dalli::KeyManager::OPTIONS = T.let(T.unsafe(nil), Array)

# This is a hard coded md5 for historical reasons
Dalli::KeyManager::TRUNCATED_KEY_SEPARATOR = T.let(T.unsafe(nil), String)

# This is 249 for historical reasons
Dalli::KeyManager::TRUNCATED_KEY_TARGET_SIZE = T.let(T.unsafe(nil), Integer)

Dalli::MIN_SUPPORTED_MEMCACHED_VERSION = T.let(T.unsafe(nil), String)

# application error in marshalling serialization
class Dalli::MarshalError < ::Dalli::DalliError; end

Dalli::NOT_FOUND = T.let(T.unsafe(nil), Dalli::NilObject)

# socket/server communication error
class Dalli::NetworkError < ::Dalli::DalliError; end

# Implements the NullObject pattern to store an application-defined value for 'Key not found' responses.
class Dalli::NilObject; end

# operation is not permitted in a multi block
class Dalli::NotPermittedMultiOpError < ::Dalli::DalliError; end

# Contains logic for the pipelined gets implemented by the client.
class Dalli::PipelinedGetter
  # @return [PipelinedGetter] a new instance of PipelinedGetter
  def initialize(ring, key_manager); end

  # Swallows Dalli::NetworkError
  def abort_with_timeout(servers); end

  # Swallows Dalli::NetworkError
  def abort_without_timeout(servers); end

  def fetch_responses(servers, start_time, timeout, &block); end

  # This loops through the servers that have keys in
  # our set, sending the noop to terminate the set of queries.
  def finish_queries(servers); end

  def finish_query_for_server(server); end
  def groups_for_keys(*keys); end

  # Loop through the server-grouped sets of keys, writing
  # the corresponding getkq requests to the appropriate servers
  #
  # It's worth noting that we could potentially reduce bytes
  # on the wire by switching from getkq to getq, and using
  # the opaque value to match requests to responses.
  def make_getkq_requests(groups); end

  # Yields, one at a time, keys and their values+attributes.
  def process(keys, &block); end

  # Processes responses from a server.  Returns true if there are no
  # additional responses from this server.
  def process_server(server); end

  def remaining_time(start, timeout); end
  def servers_with_response(servers, timeout); end
  def setup_requests(keys); end
end

module Dalli::Protocol; end

# Base class for a single Memcached server, containing logic common to all
# protocols.  Contains logic for managing connection state to the server and value
# handling.
class Dalli::Protocol::Base
  extend ::Forwardable

  # @return [Base] a new instance of Base
  def initialize(attribs, client_options = T.unsafe(nil)); end

  # Boolean method used by clients of this class to determine if this
  # particular memcached instance is available for use.
  #
  # @return [Boolean]
  def alive?; end

  def close(*args, &block); end
  def compress_by_default?(*args, &block); end
  def compression_min_size(*args, &block); end
  def compressor(*args, &block); end
  def connected?(*args, &block); end
  def down!(*args, &block); end
  def hostname(*args, &block); end
  def lock!; end

  # @return [Boolean]
  def multi?; end

  def name(*args, &block); end

  # Returns the value of attribute options.
  def options; end

  # Sets the attribute options
  #
  # @param value the value to set the attribute options to.
  def options=(_arg0); end

  def password; end

  # Abort current pipelined get. Generally used to signal an external
  # timeout during pipelined get.  The underlying socket is
  # disconnected, and the exception is swallowed.
  #
  # Returns nothing.
  def pipeline_abort; end

  # Did the last call to #pipeline_response_setup complete successfully?
  #
  # @return [Boolean]
  def pipeline_complete?; end

  # Attempt to receive and parse as many key/value pairs as possible
  # from this server. After #pipeline_response_setup, this should be invoked
  # repeatedly whenever this server's socket is readable until
  # #pipeline_complete?.
  #
  # Returns a Hash of kv pairs received.
  def pipeline_next_responses; end

  # Start reading key/value pairs from this connection. This is usually called
  # after a series of GETKQ commands. A NOOP is sent, and the server begins
  # flushing responses for kv pairs that were found.
  #
  # Returns nothing.
  def pipeline_response_setup; end

  def port(*args, &block); end

  # @return [Boolean]
  def quiet?; end

  def raise_down_error(*args, &block); end
  def reconnect_down_server?(*args, &block); end

  # Chokepoint method for error handling and ensuring liveness
  def request(opkey, *args); end

  # @return [Boolean]
  def require_auth?; end

  def serializer(*args, &block); end
  def sock(*args, &block); end
  def socket_timeout(*args, &block); end
  def socket_type(*args, &block); end
  def unlock!; end
  def up!(*args, &block); end
  def username; end

  # Returns the value of attribute weight.
  def weight; end

  # Sets the attribute weight
  #
  # @param value the value to set the attribute weight to.
  def weight=(_arg0); end

  def write(*args, &block); end

  private

  # @return [Boolean]
  def cache_nils?(opts); end

  def connect; end

  # The socket connection to the underlying server is initialized as a side
  # effect of this call.  In fact, this is the ONLY place where that
  # socket connection is initialized.
  #
  # Both this method and connect need to be in this class so we can do auth
  # as required
  #
  # Since this is invoked exclusively in verify_state!, we don't need to worry about
  # thread safety.  Using it elsewhere may require revisiting that assumption.
  def ensure_connected!; end

  # Called after the noop response is received at the end of a set
  # of pipelined gets
  def finish_pipeline; end

  def log_marshal_err(key, err); end
  def log_unexpected_err(err); end
  def pipelined_get(keys); end
  def reconnect_on_pipeline_complete!; end
  def response_buffer; end

  # @raise [Dalli::NotPermittedMultiOpError]
  def verify_allowed_quiet!(opkey); end

  # Checks to see if we can execute the specified operation.  Checks
  # whether the connection is in use, and whether the command is allowed
  def verify_state(opkey); end
end

Dalli::Protocol::Base::ALLOWED_QUIET_OPS = T.let(T.unsafe(nil), Array)

# Access point for a single Memcached server, accessed via Memcached's binary
# protocol.  Contains logic for managing connection state to the server (retries, etc),
# formatting requests to the server, and unpacking responses.
class Dalli::Protocol::Binary < ::Dalli::Protocol::Base
  include ::Dalli::Protocol::Binary::SaslAuthentication

  def response_processor; end

  private

  def add(key, value, ttl, options); end
  def append(key, value); end

  # TODO: This is confusing, as there's a cas command in memcached
  # and this isn't it.  Maybe rename?  Maybe eliminate?
  def cas(key); end

  # Arithmetic Commands
  def decr(key, count, ttl, initial); end

  def decr_incr(opkey, key, count, ttl, initial); end

  # Delete Commands
  def delete(key, cas); end

  # Other Commands
  def flush(ttl = T.unsafe(nil)); end

  def gat(key, ttl, options = T.unsafe(nil)); end

  # Retrieval Commands
  def get(key, options = T.unsafe(nil)); end

  def incr(key, count, ttl, initial); end

  # Noop is a keepalive operation but also used to demarcate the end of a set of pipelined commands.
  # We need to read all the responses at once.
  def noop; end

  def prepend(key, value); end
  def quiet_get_request(key); end
  def replace(key, value, ttl, cas, options); end
  def reset_stats; end

  # Storage Commands
  def set(key, value, ttl, cas, options); end

  def stats(info = T.unsafe(nil)); end
  def storage_req(opkey, key, value, ttl, cas, options); end
  def touch(key, ttl); end
  def version; end
  def write_append_prepend(opkey, key, value); end
  def write_noop; end
end

# This allows us to special case a nil initial value, and
# handle it differently than a zero.  This special value
# for expiry causes memcached to return a not found
# if the key doesn't already exist, rather than
# setting the initial value
Dalli::Protocol::Binary::NOT_FOUND_EXPIRY = T.let(T.unsafe(nil), Integer)

# Class that encapsulates logic for formatting binary protocol requests
# to memcached.
class Dalli::Protocol::Binary::RequestFormatter
  class << self
    def as_8byte_uint(val); end
    def decr_incr_request(opkey:, key: T.unsafe(nil), count: T.unsafe(nil), initial: T.unsafe(nil), expiry: T.unsafe(nil)); end
    def standard_request(opkey:, key: T.unsafe(nil), value: T.unsafe(nil), opaque: T.unsafe(nil), cas: T.unsafe(nil), bitflags: T.unsafe(nil), ttl: T.unsafe(nil)); end
  end
end

Dalli::Protocol::Binary::RequestFormatter::BODY_FORMATS = T.let(T.unsafe(nil), Hash)
Dalli::Protocol::Binary::RequestFormatter::FORMAT = T.let(T.unsafe(nil), Hash)
Dalli::Protocol::Binary::RequestFormatter::INCR_DECR = T.let(T.unsafe(nil), String)
Dalli::Protocol::Binary::RequestFormatter::KEY_AND_VALUE = T.let(T.unsafe(nil), String)
Dalli::Protocol::Binary::RequestFormatter::KEY_ONLY = T.let(T.unsafe(nil), String)
Dalli::Protocol::Binary::RequestFormatter::NO_BODY = T.let(T.unsafe(nil), String)
Dalli::Protocol::Binary::RequestFormatter::OPCODES = T.let(T.unsafe(nil), Hash)
Dalli::Protocol::Binary::RequestFormatter::REQUEST = T.let(T.unsafe(nil), Integer)
Dalli::Protocol::Binary::RequestFormatter::REQ_HEADER_FORMAT = T.let(T.unsafe(nil), String)
Dalli::Protocol::Binary::RequestFormatter::TTL_AND_KEY = T.let(T.unsafe(nil), String)
Dalli::Protocol::Binary::RequestFormatter::TTL_ONLY = T.let(T.unsafe(nil), String)

# Class that encapsulates data parsed from a memcached response header.
class Dalli::Protocol::Binary::ResponseHeader
  # @raise [ArgumentError]
  # @return [ResponseHeader] a new instance of ResponseHeader
  def initialize(buf); end

  # Returns the value of attribute body_len.
  def body_len; end

  # Returns the value of attribute cas.
  def cas; end

  # Returns the value of attribute data_type.
  def data_type; end

  # Returns the value of attribute extra_len.
  def extra_len; end

  # Returns the value of attribute key_len.
  def key_len; end

  # @return [Boolean]
  def not_found?; end

  # @return [Boolean]
  def not_stored?; end

  # @return [Boolean]
  def ok?; end

  # Returns the value of attribute opaque.
  def opaque; end

  # Returns the value of attribute status.
  def status; end
end

Dalli::Protocol::Binary::ResponseHeader::FMT = T.let(T.unsafe(nil), String)
Dalli::Protocol::Binary::ResponseHeader::NOT_STORED_STATUSES = T.let(T.unsafe(nil), Array)
Dalli::Protocol::Binary::ResponseHeader::SIZE = T.let(T.unsafe(nil), Integer)

# Class that encapsulates logic for processing binary protocol responses
# from memcached.  Includes logic for pulling data from an IO source
# and parsing into local values.  Handles errors on unexpected values.
class Dalli::Protocol::Binary::ResponseProcessor
  # @return [ResponseProcessor] a new instance of ResponseProcessor
  def initialize(io_source, value_marshaller); end

  def auth_response(buf = T.unsafe(nil)); end
  def consume_all_responses_until_noop; end

  # @return [Boolean]
  def contains_header?(buf); end

  def data_cas_response; end

  # Returns the new value for the key, if found and updated
  def decr_incr; end

  def delete; end
  def flush; end
  def generic_response; end
  def get(cache_nils: T.unsafe(nil)); end

  # This method returns an array of values used in a pipelined
  # getk process.  The first value is the number of bytes by
  # which to advance the pointer in the buffer.  If the
  # complete response is found in the buffer, this will
  # be the response size.  Otherwise it is zero.
  #
  # The remaining three values in the array are the ResponseHeader,
  # key, and value.
  def getk_response_from_buffer(buf); end

  def no_body_response; end

  # @raise [Dalli::DalliError]
  def raise_on_not_ok!(resp_header); end

  def read(num_bytes); end
  def read_header; end
  def read_response; end
  def reset; end
  def response_header_from_buffer(buf); end
  def stats; end

  # Response for a storage operation.  Returns the cas on success.  False
  # if the value wasn't stored.  And raises an error on all other error
  # codes from memcached.
  def storage_response; end

  def unpack_response_body(resp_header, body, parse_as_stored_value); end

  # @raise [Dalli::NetworkError]
  def validate_auth_format(extra_len, count); end

  def version; end
end

# Response codes taken from:
# https://github.com/memcached/memcached/wiki/BinaryProtocolRevamped#response-status
Dalli::Protocol::Binary::ResponseProcessor::RESPONSE_CODES = T.let(T.unsafe(nil), Hash)

# Code to support SASL authentication
module Dalli::Protocol::Binary::SaslAuthentication
  # @raise [Dalli::DalliError]
  def authenticate_connection; end

  def authenticate_with_plain; end
  def perform_auth_negotiation; end
  def supported_mechanisms!(mechanisms); end
end

Dalli::Protocol::Binary::SaslAuthentication::PLAIN_AUTH = T.let(T.unsafe(nil), String)

# Manages the socket connection to the server, including ensuring liveness
# and retries.
class Dalli::Protocol::ConnectionManager
  # @return [ConnectionManager] a new instance of ConnectionManager
  def initialize(hostname, port, socket_type, client_options); end

  def abort_request!; end
  def close; end

  # @raise [Dalli::NetworkError]
  def close_on_fork; end

  def confirm_ready!; end

  # @return [Boolean]
  def connected?; end

  # Marks the server instance as down.  Updates the down_at state
  # and raises an Dalli::NetworkError that includes the underlying
  # error in the message.  Calls close to clean up socket state
  def down!; end

  def error_on_request!(err_or_string); end
  def establish_connection; end
  def finish_request!; end

  # @return [Boolean]
  def fork_detected?; end

  # Returns the value of attribute hostname.
  def hostname; end

  # Sets the attribute hostname
  #
  # @param value the value to set the attribute hostname to.
  def hostname=(_arg0); end

  def log_down_detected; end
  def log_up_detected; end
  def log_warn_message(err_or_string); end
  def max_allowed_failures; end
  def memcached_socket; end
  def name; end

  # Returns the value of attribute options.
  def options; end

  # Sets the attribute options
  #
  # @param value the value to set the attribute options to.
  def options=(_arg0); end

  # Returns the value of attribute port.
  def port; end

  # Sets the attribute port
  #
  # @param value the value to set the attribute port to.
  def port=(_arg0); end

  # @raise [Dalli::NetworkError]
  def raise_down_error; end

  def read(count); end
  def read_line; end

  # Non-blocking read.  Should only be used in the context
  # of a caller who has called start_request!, but not yet
  # called finish_request!.  Here to support the operation
  # of the get_multi operation
  def read_nonblock; end

  # @raise [Dalli::NetworkError]
  def reconnect!(message); end

  # @return [Boolean]
  def reconnect_down_server?; end

  # @return [Boolean]
  def request_in_progress?; end

  def reset_down_info; end

  # Returns the value of attribute sock.
  def sock; end

  def socket_timeout; end

  # Returns the value of attribute socket_type.
  def socket_type; end

  # Sets the attribute socket_type
  #
  # @param value the value to set the attribute socket_type to.
  def socket_type=(_arg0); end

  def start_request!; end
  def up!; end
  def write(bytes); end
end

Dalli::Protocol::ConnectionManager::DEFAULTS = T.let(T.unsafe(nil), Hash)

# Access point for a single Memcached server, accessed via Memcached's meta
# protocol.  Contains logic for managing connection state to the server (retries, etc),
# formatting requests to the server, and unpacking responses.
class Dalli::Protocol::Meta < ::Dalli::Protocol::Base
  def response_processor; end

  private

  def add(key, value, ttl, options); end
  def append(key, value); end

  # @raise [Dalli::DalliError]
  def authenticate_connection; end

  # TODO: This is confusing, as there's a cas command in memcached
  # and this isn't it.  Maybe rename?  Maybe eliminate?
  def cas(key); end

  # Arithmetic Commands
  def decr(key, count, ttl, initial); end

  def decr_incr(incr, key, delta, ttl, initial); end

  # Delete Commands
  def delete(key, cas); end

  # Other Commands
  def flush(delay = T.unsafe(nil)); end

  def gat(key, ttl, options = T.unsafe(nil)); end

  # Retrieval Commands
  def get(key, options = T.unsafe(nil)); end

  def incr(key, count, ttl, initial); end

  # Noop is a keepalive operation but also used to demarcate the end of a set of pipelined commands.
  # We need to read all the responses at once.
  def noop; end

  def prepend(key, value); end
  def quiet_get_request(key); end
  def replace(key, value, ttl, cas, options); end
  def reset_stats; end

  # Storage Commands
  def set(key, value, ttl, cas, options); end

  def stats(info = T.unsafe(nil)); end
  def touch(key, ttl); end
  def version; end
  def write_append_prepend_req(mode, key, value, ttl = T.unsafe(nil), cas = T.unsafe(nil), _options = T.unsafe(nil)); end
  def write_noop; end
  def write_storage_req(mode, key, raw_value, ttl = T.unsafe(nil), cas = T.unsafe(nil), options = T.unsafe(nil)); end
end

# The meta protocol requires that keys be ASCII only, so Unicode keys are
# not supported.  In addition, the use of whitespace in the key is not
# allowed.
# memcached supports the use of base64 hashes for keys containing
# whitespace or non-ASCII characters, provided the 'b' flag is included in the request.
class Dalli::Protocol::Meta::KeyRegularizer
  class << self
    def decode(encoded_key, base64_encoded); end
    def encode(key); end
  end
end

Dalli::Protocol::Meta::KeyRegularizer::WHITESPACE = T.let(T.unsafe(nil), Regexp)

# Class that encapsulates logic for formatting meta protocol requests
# to memcached.
class Dalli::Protocol::Meta::RequestFormatter
  class << self
    def flush(delay: T.unsafe(nil), quiet: T.unsafe(nil)); end
    def meta_arithmetic(key:, delta:, initial:, incr: T.unsafe(nil), cas: T.unsafe(nil), ttl: T.unsafe(nil), base64: T.unsafe(nil), quiet: T.unsafe(nil)); end
    def meta_delete(key:, cas: T.unsafe(nil), ttl: T.unsafe(nil), base64: T.unsafe(nil), quiet: T.unsafe(nil)); end

    # Since these are string construction methods, we're going to disable these
    # Rubocop directives.  We really can't make this construction much simpler,
    # and introducing an intermediate object seems like overkill.
    #
    def meta_get(key:, value: T.unsafe(nil), return_cas: T.unsafe(nil), ttl: T.unsafe(nil), base64: T.unsafe(nil), quiet: T.unsafe(nil)); end

    def meta_noop; end
    def meta_set(key:, value:, bitflags: T.unsafe(nil), cas: T.unsafe(nil), ttl: T.unsafe(nil), mode: T.unsafe(nil), base64: T.unsafe(nil), quiet: T.unsafe(nil)); end
    def mode_to_token(mode); end
    def stats(arg = T.unsafe(nil)); end
    def version; end
  end
end

# Class that encapsulates logic for processing meta protocol responses
# from memcached.  Includes logic for pulling data from an IO source
# and parsing into local values.  Handles errors on unexpected values.
class Dalli::Protocol::Meta::ResponseProcessor
  # @return [ResponseProcessor] a new instance of ResponseProcessor
  def initialize(io_source, value_marshaller); end

  def bitflags_from_tokens(tokens); end
  def body_len_from_tokens(tokens); end
  def cas_from_tokens(tokens); end
  def consume_all_responses_until_mn; end

  # @return [Boolean]
  def contains_header?(buf); end

  def decr_incr; end

  # @raise [Dalli::DalliError]
  def error_on_unexpected!(expected_codes); end

  def flush; end
  def full_response_from_buffer(tokens, body, resp_size); end

  # This method returns an array of values used in a pipelined
  # getk process.  The first value is the number of bytes by
  # which to advance the pointer in the buffer.  If the
  # complete response is found in the buffer, this will
  # be the response size.  Otherwise it is zero.
  #
  # The remaining three values in the array are the ResponseHeader,
  # key, and value.
  def getk_response_from_buffer(buf); end

  def header_from_buffer(buf); end
  def key_from_tokens(tokens); end
  def meta_delete; end
  def meta_get_with_value(cache_nils: T.unsafe(nil)); end
  def meta_get_with_value_and_cas; end
  def meta_get_without_value; end
  def meta_set_append_prepend; end
  def meta_set_with_cas; end
  def next_line_to_tokens; end
  def read_line; end
  def reset; end
  def stats; end
  def tokens_from_header_buffer(buf); end
  def value_from_tokens(tokens, flag); end
  def version; end
end

Dalli::Protocol::Meta::ResponseProcessor::EN = T.let(T.unsafe(nil), String)
Dalli::Protocol::Meta::ResponseProcessor::END_TOKEN = T.let(T.unsafe(nil), String)
Dalli::Protocol::Meta::ResponseProcessor::EX = T.let(T.unsafe(nil), String)
Dalli::Protocol::Meta::ResponseProcessor::HD = T.let(T.unsafe(nil), String)
Dalli::Protocol::Meta::ResponseProcessor::MN = T.let(T.unsafe(nil), String)
Dalli::Protocol::Meta::ResponseProcessor::NF = T.let(T.unsafe(nil), String)
Dalli::Protocol::Meta::ResponseProcessor::NS = T.let(T.unsafe(nil), String)
Dalli::Protocol::Meta::ResponseProcessor::OK = T.let(T.unsafe(nil), String)
Dalli::Protocol::Meta::ResponseProcessor::RESET = T.let(T.unsafe(nil), String)
Dalli::Protocol::Meta::ResponseProcessor::STAT = T.let(T.unsafe(nil), String)
Dalli::Protocol::Meta::ResponseProcessor::VA = T.let(T.unsafe(nil), String)
Dalli::Protocol::Meta::ResponseProcessor::VERSION = T.let(T.unsafe(nil), String)
Dalli::Protocol::Meta::TERMINATOR = T.let(T.unsafe(nil), String)

# Preserved for backwards compatibility.  Should be removed in 4.0
Dalli::Protocol::NOT_FOUND = T.let(T.unsafe(nil), Dalli::NilObject)

# Manages the buffer for responses from memcached.
class Dalli::Protocol::ResponseBuffer
  # @return [ResponseBuffer] a new instance of ResponseBuffer
  def initialize(io_source, response_processor); end

  # Advances the internal response buffer by bytes_to_advance
  # bytes.  The
  def advance(bytes_to_advance); end

  # Clear the internal response buffer
  def clear; end

  # @return [Boolean]
  def in_progress?; end

  # Attempts to process a single response from the buffer.  Starts
  # by advancing the buffer to the specified start position
  def process_single_getk_response; end

  def read; end

  # Resets the internal buffer to an empty state,
  # so that we're ready to read pipelined responses
  def reset; end
end

# Dalli::Protocol::ServerConfigParser parses a server string passed to
# a Dalli::Protocol::Binary instance into the hostname, port, weight, and
# socket_type.
class Dalli::Protocol::ServerConfigParser
  class << self
    def attributes_for_tcp_socket(res); end

    # @raise [Dalli::DalliError]
    def attributes_for_unix_socket(res); end

    # @raise [Dalli::DalliError]
    def deconstruct_string(str); end

    # @raise [Dalli::DalliError]
    def normalize_host_from_match(str, res); end

    def normalize_port(port); end
    def normalize_weight(weight); end
    def parse(str); end
    def parse_non_uri(str); end
    def parse_uri(str); end
  end
end

Dalli::Protocol::ServerConfigParser::DEFAULT_PORT = T.let(T.unsafe(nil), Integer)
Dalli::Protocol::ServerConfigParser::DEFAULT_WEIGHT = T.let(T.unsafe(nil), Integer)
Dalli::Protocol::ServerConfigParser::MEMCACHED_URI_PROTOCOL = T.let(T.unsafe(nil), String)

# TODO: Revisit this, especially the IP/domain part.  Likely
# can limit character set to LDH + '.'.  Hex digit section
# is there to support IPv6 addresses, which need to be specified with
# a bounding []
Dalli::Protocol::ServerConfigParser::SERVER_CONFIG_REGEXP = T.let(T.unsafe(nil), Regexp)

# Utility class for sanitizing TTL arguments based on Memcached rules.
# TTLs are either expirations times in seconds (with a maximum value of
# 30 days) or expiration timestamps.  This class sanitizes TTLs to ensure
# they meet those restrictions.
class Dalli::Protocol::TtlSanitizer
  class << self
    def as_timestamp(ttl_as_i); end

    # Pulled out into a method so it's easy to stub time
    def current_timestamp; end

    # @return [Boolean]
    def less_than_max_expiration_interval?(ttl_as_i); end

    # Ensures the TTL passed to Memcached is a valid TTL in the expected format.
    def sanitize(ttl); end
  end
end

# https://github.com/memcached/memcached/blob/master/doc/protocol.txt#L79
# > An expiration time, in seconds. Can be up to 30 days. After 30 days, is
#   treated as a unix timestamp of an exact date.
Dalli::Protocol::TtlSanitizer::MAX_ACCEPTABLE_EXPIRATION_INTERVAL = T.let(T.unsafe(nil), Integer)

# Dalli::Protocol::ValueCompressor compartmentalizes the logic for managing
# compression and decompression of stored values.  It manages interpreting
# relevant options from both client and request, determining whether to
# compress/decompress on store/retrieve, and processes bitflags as necessary.
class Dalli::Protocol::ValueCompressor
  # @return [ValueCompressor] a new instance of ValueCompressor
  def initialize(client_options); end

  # @return [Boolean]
  def compress_by_default?; end

  # Checks whether we should apply compression when serializing a value
  # based on the specified options.  Returns false unless the value
  # is greater than the minimum compression size.  Otherwise returns
  # based on a method-level option if specified, falling back to the
  # server default.
  #
  # @return [Boolean]
  def compress_value?(value, req_options); end

  def compression_min_size; end
  def compressor; end
  def retrieve(value, bitflags); end
  def store(value, req_options, bitflags); end
end

Dalli::Protocol::ValueCompressor::DEFAULTS = T.let(T.unsafe(nil), Hash)

# https://www.hjp.at/zettel/m/memcached_flags.rxml
# Looks like most clients use bit 1 to indicate gzip compression.
Dalli::Protocol::ValueCompressor::FLAG_COMPRESSED = T.let(T.unsafe(nil), Integer)

Dalli::Protocol::ValueCompressor::OPTIONS = T.let(T.unsafe(nil), Array)

# Dalli::Protocol::ValueMarshaller compartmentalizes the logic for marshalling
# and unmarshalling unstructured data (values) to Memcached.  It also enforces
# limits on the maximum size of marshalled data.
class Dalli::Protocol::ValueMarshaller
  extend ::Forwardable

  # @return [ValueMarshaller] a new instance of ValueMarshaller
  def initialize(client_options); end

  def compress_by_default?(*args, &block); end
  def compression_min_size(*args, &block); end
  def compressor(*args, &block); end

  # @raise [Dalli::ValueOverMaxSize]
  def error_if_over_max_value_bytes(key, value); end

  def retrieve(value, flags); end
  def serializer(*args, &block); end
  def store(key, value, options = T.unsafe(nil)); end
  def value_max_bytes; end
end

Dalli::Protocol::ValueMarshaller::DEFAULTS = T.let(T.unsafe(nil), Hash)
Dalli::Protocol::ValueMarshaller::OPTIONS = T.let(T.unsafe(nil), Array)

# Dalli::Protocol::ValueSerializer compartmentalizes the logic for managing
# serialization and deserialization of stored values.  It manages interpreting
# relevant options from both client and request, determining whether to
# serialize/deserialize on store/retrieve, and processes bitflags as necessary.
class Dalli::Protocol::ValueSerializer
  # @return [ValueSerializer] a new instance of ValueSerializer
  def initialize(protocol_options); end

  # @raise [UnmarshalError]
  def filter_argument_error(err); end

  # @raise [UnmarshalError]
  def filter_name_error(err); end

  # @raise [UnmarshalError]
  def filter_type_error(err); end

  def retrieve(value, bitflags); end

  # Returns the value of attribute serialization_options.
  def serialization_options; end

  # Sets the attribute serialization_options
  #
  # @param value the value to set the attribute serialization_options to.
  def serialization_options=(_arg0); end

  def serialize_value(value); end
  def serializer; end
  def store(value, req_options, bitflags); end
end

Dalli::Protocol::ValueSerializer::ARGUMENT_ERR_REGEXP = T.let(T.unsafe(nil), Regexp)
Dalli::Protocol::ValueSerializer::DEFAULTS = T.let(T.unsafe(nil), Hash)

# https://www.hjp.at/zettel/m/memcached_flags.rxml
# Looks like most clients use bit 0 to indicate native language serialization
Dalli::Protocol::ValueSerializer::FLAG_SERIALIZED = T.let(T.unsafe(nil), Integer)

Dalli::Protocol::ValueSerializer::NAME_ERR_STR = T.let(T.unsafe(nil), String)
Dalli::Protocol::ValueSerializer::OPTIONS = T.let(T.unsafe(nil), Array)

# TODO: Some of these error messages need to be validated.  It's not obvious
# that all of them are actually generated by the invoked code
# in current systems
Dalli::Protocol::ValueSerializer::TYPE_ERR_REGEXP = T.let(T.unsafe(nil), Regexp)

Dalli::QUIET = T.let(T.unsafe(nil), Symbol)

# An implementation of a consistent hash ring, designed to minimize
# the cache miss impact of adding or removing servers from the ring.
# That is, adding or removing a server from the ring should impact
# the key -> server mapping of ~ 1/N of the stored keys where N is the
# number of servers in the ring.  This is done by creating a large
# number of "points" per server, distributed over the space
# 0x00000000 - 0xFFFFFFFF. For a given key, we calculate the CRC32
# hash, and find the nearest "point" that is less than or equal to the
# the key's hash.  In this implemetation, each "point" is represented
# by a Dalli::Ring::Entry.
class Dalli::Ring
  # @return [Ring] a new instance of Ring
  def initialize(servers_arg, protocol_implementation, options); end

  def close; end

  # this is the default in libmemcached
  def continuum; end

  # this is the default in libmemcached
  def continuum=(_arg0); end

  def keys_grouped_by_server(key_arr); end
  def lock; end
  def pipeline_consume_and_ignore_responses; end

  # @raise [Dalli::RingError]
  def server_for_key(key); end

  def server_from_continuum(key); end

  # this is the default in libmemcached
  def servers; end

  # this is the default in libmemcached
  def servers=(_arg0); end

  def socket_timeout; end

  private

  def build_continuum(servers); end
  def entry_count_for(server, total_servers, total_weight); end
  def hash_for(key); end
  def server_for_hash_key(hash_key); end
  def threadsafe!; end
end

# Represents a point in the consistent hash ring implementation.
class Dalli::Ring::Entry
  # @return [Entry] a new instance of Entry
  def initialize(val, srv); end

  # Returns the value of attribute server.
  def server; end

  # Returns the value of attribute value.
  def value; end
end

# The number of entries on the continuum created per server
# in an equally weighted scenario.
Dalli::Ring::POINTS_PER_SERVER = T.let(T.unsafe(nil), Integer)

# no server available/alive error
class Dalli::RingError < ::Dalli::DalliError; end

Dalli::Server = Dalli::Protocol::Binary

# This module contains methods for validating and normalizing the servers
# argument passed to the client.  This argument can be nil, a string, or
# an array of strings.  Each string value in the argument can represent
# a single server or a comma separated list of servers.
#
# If nil, it falls back to the values of ENV['MEMCACHE_SERVERS'] if the latter is
# defined.  If that environment value is not defined, a default of '127.0.0.1:11211'
# is used.
#
# A server config string can take one of three forms:
#   * A colon separated string of (host, port, weight) where both port and
#     weight are optional (e.g. 'localhost', 'abc.com:12345', 'example.org:22222:3')
#   * A colon separated string of (UNIX socket, weight) where the weight is optional
#     (e.g. '/var/run/memcached/socket', '/tmp/xyz:3') (not supported on Windows)
#   * A URI with a 'memcached' protocol, which will typically include a username/password
#
# The methods in this module do not validate the format of individual server strings, but
# rather normalize the argument into a compact array, wherein each array entry corresponds
# to a single server config string.  If that normalization is not possible, then an
# ArgumentError is thrown.
module Dalli::ServersArgNormalizer
  class << self
    def apply_defaults(arg); end

    # Normalizes the argument into an array of servers.
    # If the argument is a string, or an array containing strings, it's expected that the URIs are comma separated e.g.
    # "memcache1.example.com:11211,memcache2.example.com:11211,memcache3.example.com:11211"
    def normalize_servers(arg); end

    # @raise [ArgumentError]
    def validate_type(arg); end
  end
end

Dalli::ServersArgNormalizer::DEFAULT_SERVERS = T.let(T.unsafe(nil), Array)
Dalli::ServersArgNormalizer::ENV_VAR_NAME = T.let(T.unsafe(nil), String)

# Various socket implementations used by Dalli.
module Dalli::Socket; end

# Common methods for all socket implementations.
module Dalli::Socket::InstanceMethods
  # @raise [Timeout::Error]
  # @return [Boolean]
  def append_to_buffer?(result); end

  def logged_options; end

  # @return [Boolean]
  def nonblock_timed_out?(result); end

  def read_available; end
  def readfull(count); end
end

Dalli::Socket::InstanceMethods::FILTERED_OUT_OPTIONS = T.let(T.unsafe(nil), Array)
Dalli::Socket::InstanceMethods::WAIT_RCS = T.let(T.unsafe(nil), Array)

# Wraps the below TCP socket class in the case where the client
# has configured a TLS/SSL connection between Dalli and the
# Memcached server.
class Dalli::Socket::SSLSocket < ::OpenSSL::SSL::SSLSocket
  include ::Dalli::Socket::InstanceMethods

  def options; end
  def wait_readable(timeout = T.unsafe(nil)); end
  def wait_writable(timeout = T.unsafe(nil)); end
end

# A standard TCP socket between the Dalli client and the Memcached server.
class Dalli::Socket::TCP < ::TCPSocket
  include ::Dalli::Socket::InstanceMethods

  # options - supports enhanced logging in the case of a timeout
  def options; end

  # options - supports enhanced logging in the case of a timeout
  def options=(_arg0); end

  class << self
    def init_socket_options(sock, options); end
    def open(host, port, options = T.unsafe(nil)); end
    def wrapping_ssl_socket(tcp_socket, host, ssl_context); end
  end
end

# UNIX represents a UNIX domain socket, which is an interprocess communication
# mechanism between processes on the same host.  Used when the Memcached server
# is running on the same machine as the Dalli client.
class Dalli::Socket::UNIX < ::UNIXSocket
  include ::Dalli::Socket::InstanceMethods

  # options - supports enhanced logging in the case of a timeout
  # server  - used to support IO.select in the pipelined getter
  def options; end

  # options - supports enhanced logging in the case of a timeout
  # server  - used to support IO.select in the pipelined getter
  def options=(_arg0); end

  class << self
    def open(path, options = T.unsafe(nil)); end
  end
end

# Make Dalli threadsafe by using a lock around all
# public server methods.
#
# Dalli::Protocol::Binary.extend(Dalli::Threadsafe)
module Dalli::Threadsafe
  # @return [Boolean]
  def alive?; end

  def close; end
  def init_threadsafe; end
  def lock!; end
  def pipeline_abort; end
  def pipeline_next_responses; end
  def pipeline_response_setup; end
  def request(opcode, *args); end
  def unlock!; end

  class << self
    # @private
    def extended(obj); end
  end
end

# application error in marshalling deserialization or decompression
class Dalli::UnmarshalError < ::Dalli::DalliError; end

Dalli::VERSION = T.let(T.unsafe(nil), String)

# payload too big for memcached
class Dalli::ValueOverMaxSize < ::Dalli::DalliError; end
