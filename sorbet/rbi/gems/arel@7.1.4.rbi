# typed: ignore

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `arel` gem.
# Please instead update this file by running `bin/tapioca gem arel`.

module Arel
  class << self
    def sql(raw_sql); end
    def star; end
  end
end

module Arel::AliasPredication
  def as(other); end
end

Arel::Attribute = Arel::Attributes::Attribute

module Arel::Attributes
  class << self
    # Factory method to wrap a raw database +column+ to an Arel Attribute.
    def for(column); end
  end
end

class Arel::Attributes::Attribute < ::Struct
  include ::Arel::Expressions
  include ::Arel::Predications
  include ::Arel::AliasPredication
  include ::Arel::OrderPredications
  include ::Arel::Math

  # @return [Boolean]
  def able_to_type_cast?; end

  # Create a node for lowering this attribute
  def lower; end

  def type_cast_for_database(value); end
end

class Arel::Attributes::Boolean < ::Arel::Attributes::Attribute; end
class Arel::Attributes::Decimal < ::Arel::Attributes::Attribute; end
class Arel::Attributes::Float < ::Arel::Attributes::Attribute; end
class Arel::Attributes::Integer < ::Arel::Attributes::Attribute; end
class Arel::Attributes::String < ::Arel::Attributes::Attribute; end
class Arel::Attributes::Time < ::Arel::Attributes::Attribute; end
class Arel::Attributes::Undefined < ::Arel::Attributes::Attribute; end
module Arel::Collectors; end

class Arel::Collectors::Bind
  # @return [Bind] a new instance of Bind
  def initialize; end

  def <<(str); end
  def add_bind(bind); end
  def compile(bvs); end
  def substitute_binds(bvs); end
  def value; end
end

class Arel::Collectors::PlainString
  # @return [PlainString] a new instance of PlainString
  def initialize; end

  def <<(str); end
  def value; end
end

class Arel::Collectors::SQLString < ::Arel::Collectors::PlainString
  # @return [SQLString] a new instance of SQLString
  def initialize(*_arg0); end

  def add_bind(bind); end
  def compile(bvs); end
end

module Arel::Compatibility; end

class Arel::Compatibility::Wheres
  include ::Enumerable

  # @return [Wheres] a new instance of Wheres
  def initialize(engine, collection); end

  def each; end
end

module Arel::Compatibility::Wheres::Value
  def name; end
  def value; end

  # Returns the value of attribute visitor.
  def visitor; end

  # Sets the attribute visitor
  #
  # @param value the value to set the attribute visitor to.
  def visitor=(_arg0); end
end

# FIXME hopefully we can remove this
module Arel::Crud
  def compile_delete; end
  def compile_insert(values); end
  def compile_update(values, pk); end
  def create_insert; end
end

class Arel::DeleteManager < ::Arel::TreeManager
  # @return [DeleteManager] a new instance of DeleteManager
  def initialize; end

  def from(relation); end
  def take(limit); end
  def wheres=(list); end
end

module Arel::Expressions
  def average; end
  def count(distinct = T.unsafe(nil)); end
  def extract(field); end
  def maximum; end
  def minimum; end
  def sum; end
end

# Methods for creating various nodes
module Arel::FactoryMethods
  def create_and(clauses); end
  def create_false; end
  def create_join(to, constraint = T.unsafe(nil), klass = T.unsafe(nil)); end
  def create_on(expr); end
  def create_string_join(to); end
  def create_table_alias(relation, name); end
  def create_true; end
  def grouping(expr); end

  # Create a LOWER() function
  def lower(column); end
end

class Arel::InsertManager < ::Arel::TreeManager
  # @return [InsertManager] a new instance of InsertManager
  def initialize; end

  def columns; end
  def create_values(values, columns); end
  def insert(fields); end
  def into(table); end
  def select(select); end
  def values=(val); end
end

module Arel::Math
  def &(other); end
  def *(other); end
  def +(other); end
  def -(other); end
  def /(other); end
  def <<(other); end
  def >>(other); end
  def ^(other); end
  def |(other); end
  def ~; end
end

# Convenience Alias
Arel::Node = Arel::Nodes::Node

module Arel::Nodes
  class << self
    def build_quoted(other, attribute = T.unsafe(nil)); end
  end
end

class Arel::Nodes::Addition < ::Arel::Nodes::InfixOperation
  # @return [Addition] a new instance of Addition
  def initialize(left, right); end
end

class Arel::Nodes::And < ::Arel::Nodes::Node
  # @return [And] a new instance of And
  def initialize(children); end

  # @return [Boolean]
  def ==(other); end

  # Returns the value of attribute children.
  def children; end

  # @return [Boolean]
  def eql?(other); end

  def hash; end
  def left; end
  def right; end
end

class Arel::Nodes::As < ::Arel::Nodes::Binary; end

class Arel::Nodes::Ascending < ::Arel::Nodes::Ordering
  # @return [Boolean]
  def ascending?; end

  # @return [Boolean]
  def descending?; end

  def direction; end
  def reverse; end
end

class Arel::Nodes::Assignment < ::Arel::Nodes::Binary; end
class Arel::Nodes::Avg < ::Arel::Nodes::Function; end
class Arel::Nodes::Between < ::Arel::Nodes::Binary; end
class Arel::Nodes::Bin < ::Arel::Nodes::Unary; end

class Arel::Nodes::Binary < ::Arel::Nodes::Node
  # @return [Binary] a new instance of Binary
  def initialize(left, right); end

  # @return [Boolean]
  def ==(other); end

  # @return [Boolean]
  def eql?(other); end

  def hash; end

  # Returns the value of attribute left.
  def left; end

  # Sets the attribute left
  #
  # @param value the value to set the attribute left to.
  def left=(_arg0); end

  # Returns the value of attribute right.
  def right; end

  # Sets the attribute right
  #
  # @param value the value to set the attribute right to.
  def right=(_arg0); end

  private

  def initialize_copy(other); end
end

class Arel::Nodes::BindParam < ::Arel::Nodes::Node
  def ==(other); end
end

class Arel::Nodes::BitwiseAnd < ::Arel::Nodes::InfixOperation
  # @return [BitwiseAnd] a new instance of BitwiseAnd
  def initialize(left, right); end
end

class Arel::Nodes::BitwiseNot < ::Arel::Nodes::UnaryOperation
  # @return [BitwiseNot] a new instance of BitwiseNot
  def initialize(operand); end
end

class Arel::Nodes::BitwiseOr < ::Arel::Nodes::InfixOperation
  # @return [BitwiseOr] a new instance of BitwiseOr
  def initialize(left, right); end
end

class Arel::Nodes::BitwiseShiftLeft < ::Arel::Nodes::InfixOperation
  # @return [BitwiseShiftLeft] a new instance of BitwiseShiftLeft
  def initialize(left, right); end
end

class Arel::Nodes::BitwiseShiftRight < ::Arel::Nodes::InfixOperation
  # @return [BitwiseShiftRight] a new instance of BitwiseShiftRight
  def initialize(left, right); end
end

class Arel::Nodes::BitwiseXor < ::Arel::Nodes::InfixOperation
  # @return [BitwiseXor] a new instance of BitwiseXor
  def initialize(left, right); end
end

class Arel::Nodes::Case < ::Arel::Nodes::Node
  include ::Arel::OrderPredications
  include ::Arel::Predications
  include ::Arel::AliasPredication

  # @return [Case] a new instance of Case
  def initialize(expression = T.unsafe(nil), default = T.unsafe(nil)); end

  # @return [Boolean]
  def ==(other); end

  # Returns the value of attribute case.
  def case; end

  # Sets the attribute case
  #
  # @param value the value to set the attribute case to.
  def case=(_arg0); end

  # Returns the value of attribute conditions.
  def conditions; end

  # Sets the attribute conditions
  #
  # @param value the value to set the attribute conditions to.
  def conditions=(_arg0); end

  # Returns the value of attribute default.
  def default; end

  # Sets the attribute default
  #
  # @param value the value to set the attribute default to.
  def default=(_arg0); end

  def else(expression); end

  # @return [Boolean]
  def eql?(other); end

  def hash; end
  def then(expression); end
  def when(condition, expression = T.unsafe(nil)); end

  private

  def initialize_copy(other); end
end

class Arel::Nodes::Casted < ::Arel::Nodes::Node
  # @return [Casted] a new instance of Casted
  def initialize(val, attribute); end

  # @return [Boolean]
  def ==(other); end

  # Returns the value of attribute attribute.
  def attribute; end

  # @return [Boolean]
  def eql?(other); end

  def hash; end

  # @return [Boolean]
  def nil?; end

  # Returns the value of attribute val.
  def val; end
end

class Arel::Nodes::Concat < ::Arel::Nodes::InfixOperation
  # @return [Concat] a new instance of Concat
  def initialize(left, right); end
end

class Arel::Nodes::Count < ::Arel::Nodes::Function
  # @return [Count] a new instance of Count
  def initialize(expr, distinct = T.unsafe(nil), aliaz = T.unsafe(nil)); end
end

class Arel::Nodes::Cube < ::Arel::Nodes::Unary; end

class Arel::Nodes::CurrentRow < ::Arel::Nodes::Node
  # @return [Boolean]
  def eql?(other); end

  def hash; end
end

class Arel::Nodes::DeleteStatement < ::Arel::Nodes::Binary
  # @return [DeleteStatement] a new instance of DeleteStatement
  def initialize(relation = T.unsafe(nil), wheres = T.unsafe(nil)); end

  # Returns the value of attribute limit.
  def limit; end

  # Sets the attribute limit
  #
  # @param value the value to set the attribute limit to.
  def limit=(_arg0); end

  def relation; end
  def relation=(_arg0); end
  def wheres; end
  def wheres=(_arg0); end

  private

  def initialize_copy(other); end
end

class Arel::Nodes::Descending < ::Arel::Nodes::Ordering
  # @return [Boolean]
  def ascending?; end

  # @return [Boolean]
  def descending?; end

  def direction; end
  def reverse; end
end

class Arel::Nodes::Distinct < ::Arel::Nodes::Node
  # @return [Boolean]
  def eql?(other); end

  def hash; end
end

class Arel::Nodes::DistinctOn < ::Arel::Nodes::Unary; end

class Arel::Nodes::Division < ::Arel::Nodes::InfixOperation
  # @return [Division] a new instance of Division
  def initialize(left, right); end
end

class Arel::Nodes::DoesNotMatch < ::Arel::Nodes::Matches; end
class Arel::Nodes::Else < ::Arel::Nodes::Unary; end

class Arel::Nodes::Equality < ::Arel::Nodes::Binary
  def operand1; end
  def operand2; end
  def operator; end
end

class Arel::Nodes::Except < ::Arel::Nodes::Binary; end
class Arel::Nodes::Exists < ::Arel::Nodes::Function; end

class Arel::Nodes::Extract < ::Arel::Nodes::Unary
  include ::Arel::AliasPredication
  include ::Arel::Predications

  # @return [Extract] a new instance of Extract
  def initialize(expr, field); end

  # @return [Boolean]
  def ==(other); end

  # @return [Boolean]
  def eql?(other); end

  # Returns the value of attribute field.
  def field; end

  # Sets the attribute field
  #
  # @param value the value to set the attribute field to.
  def field=(_arg0); end

  def hash; end
end

class Arel::Nodes::False < ::Arel::Nodes::Node
  # @return [Boolean]
  def eql?(other); end

  def hash; end
end

class Arel::Nodes::Following < ::Arel::Nodes::Unary
  # @return [Following] a new instance of Following
  def initialize(expr = T.unsafe(nil)); end
end

class Arel::Nodes::FullOuterJoin < ::Arel::Nodes::Join; end

class Arel::Nodes::Function < ::Arel::Nodes::Node
  include ::Arel::Predications
  include ::Arel::WindowPredications
  include ::Arel::OrderPredications

  # @return [Function] a new instance of Function
  def initialize(expr, aliaz = T.unsafe(nil)); end

  # Returns the value of attribute alias.
  def alias; end

  # Sets the attribute alias
  #
  # @param value the value to set the attribute alias to.
  def alias=(_arg0); end

  def as(aliaz); end

  # Returns the value of attribute distinct.
  def distinct; end

  # Sets the attribute distinct
  #
  # @param value the value to set the attribute distinct to.
  def distinct=(_arg0); end

  # @return [Boolean]
  def eql?(other); end

  # Returns the value of attribute expressions.
  def expressions; end

  # Sets the attribute expressions
  #
  # @param value the value to set the attribute expressions to.
  def expressions=(_arg0); end

  def hash; end
end

class Arel::Nodes::GreaterThan < ::Arel::Nodes::Binary; end
class Arel::Nodes::GreaterThanOrEqual < ::Arel::Nodes::Binary; end
class Arel::Nodes::Group < ::Arel::Nodes::Unary; end

class Arel::Nodes::Grouping < ::Arel::Nodes::Unary
  include ::Arel::Predications
end

class Arel::Nodes::GroupingElement < ::Arel::Nodes::Unary; end
class Arel::Nodes::GroupingSet < ::Arel::Nodes::Unary; end
class Arel::Nodes::In < ::Arel::Nodes::Equality; end

class Arel::Nodes::InfixOperation < ::Arel::Nodes::Binary
  include ::Arel::Expressions
  include ::Arel::Predications
  include ::Arel::OrderPredications
  include ::Arel::AliasPredication
  include ::Arel::Math

  # @return [InfixOperation] a new instance of InfixOperation
  def initialize(operator, left, right); end

  # Returns the value of attribute operator.
  def operator; end
end

class Arel::Nodes::InnerJoin < ::Arel::Nodes::Join; end

class Arel::Nodes::InsertStatement < ::Arel::Nodes::Node
  # @return [InsertStatement] a new instance of InsertStatement
  def initialize; end

  # @return [Boolean]
  def ==(other); end

  # Returns the value of attribute columns.
  def columns; end

  # Sets the attribute columns
  #
  # @param value the value to set the attribute columns to.
  def columns=(_arg0); end

  # @return [Boolean]
  def eql?(other); end

  def hash; end

  # Returns the value of attribute relation.
  def relation; end

  # Sets the attribute relation
  #
  # @param value the value to set the attribute relation to.
  def relation=(_arg0); end

  # Returns the value of attribute select.
  def select; end

  # Sets the attribute select
  #
  # @param value the value to set the attribute select to.
  def select=(_arg0); end

  # Returns the value of attribute values.
  def values; end

  # Sets the attribute values
  #
  # @param value the value to set the attribute values to.
  def values=(_arg0); end

  private

  def initialize_copy(other); end
end

class Arel::Nodes::Intersect < ::Arel::Nodes::Binary; end
class Arel::Nodes::Join < ::Arel::Nodes::Binary; end

# Class that represents a join source
#
#   http://www.sqlite.org/syntaxdiagrams.html#join-source
class Arel::Nodes::JoinSource < ::Arel::Nodes::Binary
  # @return [JoinSource] a new instance of JoinSource
  def initialize(single_source, joinop = T.unsafe(nil)); end

  # @return [Boolean]
  def empty?; end
end

class Arel::Nodes::LessThan < ::Arel::Nodes::Binary; end
class Arel::Nodes::LessThanOrEqual < ::Arel::Nodes::Binary; end
class Arel::Nodes::Limit < ::Arel::Nodes::Unary; end
class Arel::Nodes::Lock < ::Arel::Nodes::Unary; end

class Arel::Nodes::Matches < ::Arel::Nodes::Binary
  # @return [Matches] a new instance of Matches
  def initialize(left, right, escape = T.unsafe(nil), case_sensitive = T.unsafe(nil)); end

  # Returns the value of attribute case_sensitive.
  def case_sensitive; end

  # Sets the attribute case_sensitive
  #
  # @param value the value to set the attribute case_sensitive to.
  def case_sensitive=(_arg0); end

  # Returns the value of attribute escape.
  def escape; end
end

class Arel::Nodes::Max < ::Arel::Nodes::Function; end
class Arel::Nodes::Min < ::Arel::Nodes::Function; end

class Arel::Nodes::Multiplication < ::Arel::Nodes::InfixOperation
  # @return [Multiplication] a new instance of Multiplication
  def initialize(left, right); end
end

class Arel::Nodes::NamedFunction < ::Arel::Nodes::Function
  # @return [NamedFunction] a new instance of NamedFunction
  def initialize(name, expr, aliaz = T.unsafe(nil)); end

  # @return [Boolean]
  def ==(other); end

  # @return [Boolean]
  def eql?(other); end

  def hash; end

  # Returns the value of attribute name.
  def name; end

  # Sets the attribute name
  #
  # @param value the value to set the attribute name to.
  def name=(_arg0); end
end

class Arel::Nodes::NamedWindow < ::Arel::Nodes::Window
  # @return [NamedWindow] a new instance of NamedWindow
  def initialize(name); end

  # @return [Boolean]
  def ==(other); end

  # @return [Boolean]
  def eql?(other); end

  def hash; end

  # Returns the value of attribute name.
  def name; end

  # Sets the attribute name
  #
  # @param value the value to set the attribute name to.
  def name=(_arg0); end

  private

  def initialize_copy(other); end
end

# Abstract base class for all AST nodes
class Arel::Nodes::Node
  include ::Arel::FactoryMethods
  include ::Enumerable

  # Factory method to create an Nodes::And node.
  def and(right); end

  # Iterate through AST, nodes will be yielded depth-first
  def each(&block); end

  # Factory method to create a Nodes::Not node that has the recipient of
  # the caller as a child.
  def not; end

  # Factory method to create a Nodes::Grouping node that has an Nodes::Or
  # node as a child.
  def or(right); end

  # FIXME: this method should go away.  I don't like people calling
  # to_sql on non-head nodes.  This forces us to walk the AST until we
  # can find a node that has a "relation" member.
  #
  # Maybe we should just use `Table.engine`?  :'(
  def to_sql(engine = T.unsafe(nil)); end
end

class Arel::Nodes::Not < ::Arel::Nodes::Unary; end
class Arel::Nodes::NotEqual < ::Arel::Nodes::Binary; end
class Arel::Nodes::NotIn < ::Arel::Nodes::Binary; end
class Arel::Nodes::NotRegexp < ::Arel::Nodes::Regexp; end
class Arel::Nodes::Offset < ::Arel::Nodes::Unary; end
class Arel::Nodes::On < ::Arel::Nodes::Unary; end
class Arel::Nodes::Or < ::Arel::Nodes::Binary; end
class Arel::Nodes::Ordering < ::Arel::Nodes::Unary; end
class Arel::Nodes::OuterJoin < ::Arel::Nodes::Join; end

class Arel::Nodes::Over < ::Arel::Nodes::Binary
  include ::Arel::AliasPredication

  # @return [Over] a new instance of Over
  def initialize(left, right = T.unsafe(nil)); end

  def operator; end
end

class Arel::Nodes::Preceding < ::Arel::Nodes::Unary
  # @return [Preceding] a new instance of Preceding
  def initialize(expr = T.unsafe(nil)); end
end

class Arel::Nodes::Quoted < ::Arel::Nodes::Unary
  # @return [Boolean]
  def nil?; end

  def val; end
end

class Arel::Nodes::Range < ::Arel::Nodes::Unary
  # @return [Range] a new instance of Range
  def initialize(expr = T.unsafe(nil)); end
end

class Arel::Nodes::Regexp < ::Arel::Nodes::Binary
  # @return [Regexp] a new instance of Regexp
  def initialize(left, right, case_sensitive = T.unsafe(nil)); end

  # Returns the value of attribute case_sensitive.
  def case_sensitive; end

  # Sets the attribute case_sensitive
  #
  # @param value the value to set the attribute case_sensitive to.
  def case_sensitive=(_arg0); end
end

class Arel::Nodes::RightOuterJoin < ::Arel::Nodes::Join; end
class Arel::Nodes::RollUp < ::Arel::Nodes::Unary; end

class Arel::Nodes::Rows < ::Arel::Nodes::Unary
  # @return [Rows] a new instance of Rows
  def initialize(expr = T.unsafe(nil)); end
end

class Arel::Nodes::SelectCore < ::Arel::Nodes::Node
  # @return [SelectCore] a new instance of SelectCore
  def initialize; end

  # @return [Boolean]
  def ==(other); end

  # @return [Boolean]
  def eql?(other); end

  def from; end
  def from=(value); end
  def froms; end
  def froms=(value); end

  # Returns the value of attribute groups.
  def groups; end

  # Sets the attribute groups
  #
  # @param value the value to set the attribute groups to.
  def groups=(_arg0); end

  def hash; end

  # Returns the value of attribute havings.
  def havings; end

  # Sets the attribute havings
  #
  # @param value the value to set the attribute havings to.
  def havings=(_arg0); end

  # Returns the value of attribute projections.
  def projections; end

  # Sets the attribute projections
  #
  # @param value the value to set the attribute projections to.
  def projections=(_arg0); end

  # Returns the value of attribute set_quantifier.
  def set_quantifier; end

  # Sets the attribute set_quantifier
  #
  # @param value the value to set the attribute set_quantifier to.
  def set_quantifier=(_arg0); end

  # Returns the value of attribute source.
  def source; end

  # Sets the attribute source
  #
  # @param value the value to set the attribute source to.
  def source=(_arg0); end

  # Returns the value of attribute top.
  def top; end

  # Sets the attribute top
  #
  # @param value the value to set the attribute top to.
  def top=(_arg0); end

  # Returns the value of attribute wheres.
  def wheres; end

  # Sets the attribute wheres
  #
  # @param value the value to set the attribute wheres to.
  def wheres=(_arg0); end

  # Returns the value of attribute windows.
  def windows; end

  # Sets the attribute windows
  #
  # @param value the value to set the attribute windows to.
  def windows=(_arg0); end

  private

  def initialize_copy(other); end
end

class Arel::Nodes::SelectStatement < ::Arel::Nodes::Node
  # @return [SelectStatement] a new instance of SelectStatement
  def initialize(cores = T.unsafe(nil)); end

  # @return [Boolean]
  def ==(other); end

  # Returns the value of attribute cores.
  def cores; end

  # @return [Boolean]
  def eql?(other); end

  def hash; end

  # Returns the value of attribute limit.
  def limit; end

  # Sets the attribute limit
  #
  # @param value the value to set the attribute limit to.
  def limit=(_arg0); end

  # Returns the value of attribute lock.
  def lock; end

  # Sets the attribute lock
  #
  # @param value the value to set the attribute lock to.
  def lock=(_arg0); end

  # Returns the value of attribute offset.
  def offset; end

  # Sets the attribute offset
  #
  # @param value the value to set the attribute offset to.
  def offset=(_arg0); end

  # Returns the value of attribute orders.
  def orders; end

  # Sets the attribute orders
  #
  # @param value the value to set the attribute orders to.
  def orders=(_arg0); end

  # Returns the value of attribute with.
  def with; end

  # Sets the attribute with
  #
  # @param value the value to set the attribute with to.
  def with=(_arg0); end

  private

  def initialize_copy(other); end
end

class Arel::Nodes::SqlLiteral < ::String
  include ::Arel::Expressions
  include ::Arel::Predications
  include ::Arel::AliasPredication
  include ::Arel::OrderPredications

  def encode_with(coder); end
end

class Arel::Nodes::StringJoin < ::Arel::Nodes::Join
  # @return [StringJoin] a new instance of StringJoin
  def initialize(left, right = T.unsafe(nil)); end
end

class Arel::Nodes::Subtraction < ::Arel::Nodes::InfixOperation
  # @return [Subtraction] a new instance of Subtraction
  def initialize(left, right); end
end

class Arel::Nodes::Sum < ::Arel::Nodes::Function; end

class Arel::Nodes::TableAlias < ::Arel::Nodes::Binary
  def [](name); end

  # @return [Boolean]
  def able_to_type_cast?; end

  def name; end
  def relation; end
  def table_alias; end
  def table_name; end
  def type_cast_for_database(*args); end
end

class Arel::Nodes::Top < ::Arel::Nodes::Unary; end

class Arel::Nodes::True < ::Arel::Nodes::Node
  # @return [Boolean]
  def eql?(other); end

  def hash; end
end

class Arel::Nodes::Unary < ::Arel::Nodes::Node
  # @return [Unary] a new instance of Unary
  def initialize(expr); end

  # @return [Boolean]
  def ==(other); end

  # @return [Boolean]
  def eql?(other); end

  # Returns the value of attribute expr.
  def expr; end

  # Sets the attribute expr
  #
  # @param value the value to set the attribute expr to.
  def expr=(_arg0); end

  def hash; end

  # Returns the value of attribute expr.
  def value; end
end

class Arel::Nodes::UnaryOperation < ::Arel::Nodes::Unary
  include ::Arel::Expressions
  include ::Arel::Predications
  include ::Arel::OrderPredications
  include ::Arel::AliasPredication
  include ::Arel::Math

  # @return [UnaryOperation] a new instance of UnaryOperation
  def initialize(operator, operand); end

  # Returns the value of attribute operator.
  def operator; end
end

class Arel::Nodes::Union < ::Arel::Nodes::Binary; end
class Arel::Nodes::UnionAll < ::Arel::Nodes::Binary; end

class Arel::Nodes::UnqualifiedColumn < ::Arel::Nodes::Unary
  def attribute; end
  def attribute=(_arg0); end
  def column; end
  def name; end
  def relation; end
end

class Arel::Nodes::UpdateStatement < ::Arel::Nodes::Node
  # @return [UpdateStatement] a new instance of UpdateStatement
  def initialize; end

  # @return [Boolean]
  def ==(other); end

  # @return [Boolean]
  def eql?(other); end

  def hash; end

  # Returns the value of attribute key.
  def key; end

  # Sets the attribute key
  #
  # @param value the value to set the attribute key to.
  def key=(_arg0); end

  # Returns the value of attribute limit.
  def limit; end

  # Sets the attribute limit
  #
  # @param value the value to set the attribute limit to.
  def limit=(_arg0); end

  # Returns the value of attribute orders.
  def orders; end

  # Sets the attribute orders
  #
  # @param value the value to set the attribute orders to.
  def orders=(_arg0); end

  # Returns the value of attribute relation.
  def relation; end

  # Sets the attribute relation
  #
  # @param value the value to set the attribute relation to.
  def relation=(_arg0); end

  # Returns the value of attribute values.
  def values; end

  # Sets the attribute values
  #
  # @param value the value to set the attribute values to.
  def values=(_arg0); end

  # Returns the value of attribute wheres.
  def wheres; end

  # Sets the attribute wheres
  #
  # @param value the value to set the attribute wheres to.
  def wheres=(_arg0); end

  private

  def initialize_copy(other); end
end

class Arel::Nodes::Values < ::Arel::Nodes::Binary
  # @return [Values] a new instance of Values
  def initialize(exprs, columns = T.unsafe(nil)); end

  def columns; end
  def columns=(_arg0); end
  def expressions; end
  def expressions=(_arg0); end
end

class Arel::Nodes::When < ::Arel::Nodes::Binary; end

class Arel::Nodes::Window < ::Arel::Nodes::Node
  # @return [Window] a new instance of Window
  def initialize; end

  # @return [Boolean]
  def ==(other); end

  # @return [Boolean]
  def eql?(other); end

  def frame(expr); end

  # Returns the value of attribute framing.
  def framing; end

  # Sets the attribute framing
  #
  # @param value the value to set the attribute framing to.
  def framing=(_arg0); end

  def hash; end
  def order(*expr); end

  # Returns the value of attribute orders.
  def orders; end

  # Sets the attribute orders
  #
  # @param value the value to set the attribute orders to.
  def orders=(_arg0); end

  def partition(*expr); end

  # Returns the value of attribute partitions.
  def partitions; end

  # Sets the attribute partitions
  #
  # @param value the value to set the attribute partitions to.
  def partitions=(_arg0); end

  def range(expr = T.unsafe(nil)); end
  def rows(expr = T.unsafe(nil)); end

  private

  def initialize_copy(other); end
end

class Arel::Nodes::With < ::Arel::Nodes::Unary
  def children; end
end

class Arel::Nodes::WithRecursive < ::Arel::Nodes::With; end

module Arel::OrderPredications
  def asc; end
  def desc; end
end

module Arel::Predications
  def between(other); end
  def concat(other); end
  def does_not_match(other, escape = T.unsafe(nil), case_sensitive = T.unsafe(nil)); end
  def does_not_match_all(others, escape = T.unsafe(nil)); end
  def does_not_match_any(others, escape = T.unsafe(nil)); end
  def does_not_match_regexp(other, case_sensitive = T.unsafe(nil)); end
  def eq(other); end
  def eq_all(others); end
  def eq_any(others); end
  def gt(right); end
  def gt_all(others); end
  def gt_any(others); end
  def gteq(right); end
  def gteq_all(others); end
  def gteq_any(others); end
  def in(other); end
  def in_all(others); end
  def in_any(others); end
  def lt(right); end
  def lt_all(others); end
  def lt_any(others); end
  def lteq(right); end
  def lteq_all(others); end
  def lteq_any(others); end
  def matches(other, escape = T.unsafe(nil), case_sensitive = T.unsafe(nil)); end
  def matches_all(others, escape = T.unsafe(nil), case_sensitive = T.unsafe(nil)); end
  def matches_any(others, escape = T.unsafe(nil), case_sensitive = T.unsafe(nil)); end
  def matches_regexp(other, case_sensitive = T.unsafe(nil)); end
  def not_between(other); end
  def not_eq(other); end
  def not_eq_all(others); end
  def not_eq_any(others); end
  def not_in(other); end
  def not_in_all(others); end
  def not_in_any(others); end
  def when(right); end

  private

  # @return [Boolean]
  def equals_quoted?(maybe_quoted, value); end

  def grouping_all(method_id, others, *extras); end
  def grouping_any(method_id, others, *extras); end
  def quoted_array(others); end
  def quoted_node(other); end
end

class Arel::SelectManager < ::Arel::TreeManager
  include ::Arel::Crud

  # @return [SelectManager] a new instance of SelectManager
  def initialize(table = T.unsafe(nil)); end

  def as(other); end
  def constraints; end
  def distinct(value = T.unsafe(nil)); end
  def distinct_on(value); end
  def except(other); end

  # Produces an Arel::Nodes::Exists node
  def exists; end

  def from(table); end
  def froms; end
  def group(*columns); end
  def having(expr); end
  def intersect(other); end
  def join(relation, klass = T.unsafe(nil)); end
  def join_sources; end
  def limit; end
  def limit=(limit); end
  def lock(locking = T.unsafe(nil)); end
  def locked; end
  def minus(other); end
  def offset; end
  def offset=(amount); end
  def on(*exprs); end
  def order(*expr); end
  def orders; end
  def outer_join(relation); end
  def project(*projections); end
  def projections; end
  def projections=(projections); end
  def skip(amount); end
  def source; end
  def take(limit); end
  def taken; end
  def union(operation, other = T.unsafe(nil)); end
  def where_sql(engine = T.unsafe(nil)); end
  def window(name); end
  def with(*subqueries); end

  private

  def collapse(exprs, existing = T.unsafe(nil)); end
  def initialize_copy(other); end
end

class Arel::SelectManager::Row < ::Struct
  def id; end
  def method_missing(name, *args); end
end

Arel::SelectManager::STRING_OR_SYMBOL_CLASS = T.let(T.unsafe(nil), Array)

class Arel::Table
  include ::Arel::Crud
  include ::Arel::FactoryMethods

  # @return [Table] a new instance of Table
  def initialize(name, as: T.unsafe(nil), type_caster: T.unsafe(nil)); end

  # @return [Boolean]
  def ==(other); end

  def [](name); end

  # @return [Boolean]
  def able_to_type_cast?; end

  def alias(name = T.unsafe(nil)); end

  # @return [Boolean]
  def eql?(other); end

  def from; end
  def group(*columns); end
  def hash; end
  def having(expr); end
  def join(relation, klass = T.unsafe(nil)); end

  # Returns the value of attribute name.
  def name; end

  # Sets the attribute name
  #
  # @param value the value to set the attribute name to.
  def name=(_arg0); end

  def order(*expr); end
  def outer_join(relation); end
  def project(*things); end
  def skip(amount); end

  # Returns the value of attribute table_alias.
  def table_alias; end

  # Sets the attribute table_alias
  #
  # @param value the value to set the attribute table_alias to.
  def table_alias=(_arg0); end

  # Returns the value of attribute name.
  # TableAlias and Table both have a #table_name which is the name of the underlying table
  def table_name; end

  def take(amount); end
  def type_cast_for_database(attribute_name, value); end
  def where(condition); end

  protected

  # Returns the value of attribute type_caster.
  def type_caster; end

  private

  def attributes_for(columns); end

  class << self
    # Returns the value of attribute engine.
    def engine; end

    # Sets the attribute engine
    #
    # @param value the value to set the attribute engine to.
    def engine=(_arg0); end
  end
end

class Arel::TreeManager
  include ::Arel::FactoryMethods

  # @return [TreeManager] a new instance of TreeManager
  def initialize; end

  # Returns the value of attribute ast.
  def ast; end

  # Returns the value of attribute bind_values.
  def bind_values; end

  # Sets the attribute bind_values
  #
  # @param value the value to set the attribute bind_values to.
  def bind_values=(_arg0); end

  # Returns the value of attribute engine.
  def engine; end

  def to_dot; end
  def to_sql(engine = T.unsafe(nil)); end
  def where(expr); end

  private

  def initialize_copy(other); end
end

class Arel::UpdateManager < ::Arel::TreeManager
  # @return [UpdateManager] a new instance of UpdateManager
  def initialize; end

  def key; end
  def key=(key); end
  def order(*expr); end
  def set(values); end

  # UPDATE +table+
  def table(table); end

  def take(limit); end
  def where(expr); end
  def wheres=(exprs); end
end

Arel::VERSION = T.let(T.unsafe(nil), String)
module Arel::Visitors; end

class Arel::Visitors::DepthFirst < ::Arel::Visitors::Visitor
  # @return [DepthFirst] a new instance of DepthFirst
  def initialize(block = T.unsafe(nil)); end

  private

  def binary(o); end
  def function(o); end
  def get_dispatch_cache; end
  def nary(o); end
  def terminal(o); end
  def unary(o); end
  def visit(o); end
  def visit_ActiveSupport_Multibyte_Chars(o); end
  def visit_ActiveSupport_StringInquirer(o); end
  def visit_Arel_Attribute(o); end
  def visit_Arel_Attributes_Attribute(o); end
  def visit_Arel_Attributes_Boolean(o); end
  def visit_Arel_Attributes_Decimal(o); end
  def visit_Arel_Attributes_Float(o); end
  def visit_Arel_Attributes_Integer(o); end
  def visit_Arel_Attributes_String(o); end
  def visit_Arel_Attributes_Time(o); end
  def visit_Arel_Nodes_And(o); end
  def visit_Arel_Nodes_As(o); end
  def visit_Arel_Nodes_Ascending(o); end
  def visit_Arel_Nodes_Assignment(o); end
  def visit_Arel_Nodes_Avg(o); end
  def visit_Arel_Nodes_Between(o); end
  def visit_Arel_Nodes_BindParam(o); end
  def visit_Arel_Nodes_Case(o); end
  def visit_Arel_Nodes_Concat(o); end
  def visit_Arel_Nodes_Count(o); end
  def visit_Arel_Nodes_Cube(o); end
  def visit_Arel_Nodes_DeleteStatement(o); end
  def visit_Arel_Nodes_Descending(o); end
  def visit_Arel_Nodes_DoesNotMatch(o); end
  def visit_Arel_Nodes_Else(o); end
  def visit_Arel_Nodes_Equality(o); end
  def visit_Arel_Nodes_Exists(o); end
  def visit_Arel_Nodes_False(o); end
  def visit_Arel_Nodes_FullOuterJoin(o); end
  def visit_Arel_Nodes_GreaterThan(o); end
  def visit_Arel_Nodes_GreaterThanOrEqual(o); end
  def visit_Arel_Nodes_Group(o); end
  def visit_Arel_Nodes_Grouping(o); end
  def visit_Arel_Nodes_GroupingElement(o); end
  def visit_Arel_Nodes_GroupingSet(o); end
  def visit_Arel_Nodes_Having(o); end
  def visit_Arel_Nodes_In(o); end
  def visit_Arel_Nodes_InfixOperation(o); end
  def visit_Arel_Nodes_InnerJoin(o); end
  def visit_Arel_Nodes_InsertStatement(o); end
  def visit_Arel_Nodes_JoinSource(o); end
  def visit_Arel_Nodes_LessThan(o); end
  def visit_Arel_Nodes_LessThanOrEqual(o); end
  def visit_Arel_Nodes_Limit(o); end
  def visit_Arel_Nodes_Lock(o); end
  def visit_Arel_Nodes_Matches(o); end
  def visit_Arel_Nodes_Max(o); end
  def visit_Arel_Nodes_Min(o); end
  def visit_Arel_Nodes_NamedFunction(o); end
  def visit_Arel_Nodes_Node(o); end
  def visit_Arel_Nodes_Not(o); end
  def visit_Arel_Nodes_NotEqual(o); end
  def visit_Arel_Nodes_NotIn(o); end
  def visit_Arel_Nodes_NotRegexp(o); end
  def visit_Arel_Nodes_Offset(o); end
  def visit_Arel_Nodes_On(o); end
  def visit_Arel_Nodes_Or(o); end
  def visit_Arel_Nodes_Ordering(o); end
  def visit_Arel_Nodes_OuterJoin(o); end
  def visit_Arel_Nodes_Regexp(o); end
  def visit_Arel_Nodes_RightOuterJoin(o); end
  def visit_Arel_Nodes_RollUp(o); end
  def visit_Arel_Nodes_SelectCore(o); end
  def visit_Arel_Nodes_SelectStatement(o); end
  def visit_Arel_Nodes_SqlLiteral(o); end
  def visit_Arel_Nodes_StringJoin(o); end
  def visit_Arel_Nodes_Sum(o); end
  def visit_Arel_Nodes_TableAlias(o); end
  def visit_Arel_Nodes_Top(o); end
  def visit_Arel_Nodes_True(o); end
  def visit_Arel_Nodes_UnqualifiedColumn(o); end
  def visit_Arel_Nodes_UpdateStatement(o); end
  def visit_Arel_Nodes_Values(o); end
  def visit_Arel_Nodes_When(o); end
  def visit_Arel_Nodes_Window(o); end
  def visit_Arel_Table(o); end
  def visit_Array(o); end
  def visit_BigDecimal(o); end
  def visit_Bignum(o); end
  def visit_Class(o); end
  def visit_Date(o); end
  def visit_DateTime(o); end
  def visit_FalseClass(o); end
  def visit_Fixnum(o); end
  def visit_Float(o); end
  def visit_Hash(o); end
  def visit_Integer(o); end
  def visit_NilClass(o); end
  def visit_Set(o); end
  def visit_String(o); end
  def visit_Symbol(o); end
  def visit_Time(o); end
  def visit_TrueClass(o); end
end

Arel::Visitors::DepthFirst::DISPATCH = T.let(T.unsafe(nil), Hash)

class Arel::Visitors::Dot < ::Arel::Visitors::Visitor
  # @return [Dot] a new instance of Dot
  def initialize; end

  def accept(object, collector); end

  private

  def binary(o); end
  def edge(name); end
  def extract(o); end
  def function(o); end
  def named_window(o); end
  def nary(o); end
  def quote(string); end
  def to_dot; end
  def unary(o); end
  def visit(o); end
  def visit_Arel_Attribute(o); end
  def visit_Arel_Attributes_Attribute(o); end
  def visit_Arel_Attributes_Boolean(o); end
  def visit_Arel_Attributes_Float(o); end
  def visit_Arel_Attributes_Integer(o); end
  def visit_Arel_Attributes_String(o); end
  def visit_Arel_Attributes_Time(o); end
  def visit_Arel_Nodes_And(o); end
  def visit_Arel_Nodes_As(o); end
  def visit_Arel_Nodes_Assignment(o); end
  def visit_Arel_Nodes_Avg(o); end
  def visit_Arel_Nodes_Between(o); end
  def visit_Arel_Nodes_BindParam(o); end
  def visit_Arel_Nodes_Casted(o); end
  def visit_Arel_Nodes_Concat(o); end
  def visit_Arel_Nodes_Count(o); end
  def visit_Arel_Nodes_Cube(o); end
  def visit_Arel_Nodes_DeleteStatement(o); end
  def visit_Arel_Nodes_DoesNotMatch(o); end
  def visit_Arel_Nodes_Equality(o); end
  def visit_Arel_Nodes_Exists(o); end
  def visit_Arel_Nodes_Extract(o); end
  def visit_Arel_Nodes_Following(o); end
  def visit_Arel_Nodes_FullOuterJoin(o); end
  def visit_Arel_Nodes_GreaterThan(o); end
  def visit_Arel_Nodes_GreaterThanOrEqual(o); end
  def visit_Arel_Nodes_Group(o); end
  def visit_Arel_Nodes_Grouping(o); end
  def visit_Arel_Nodes_GroupingElement(o); end
  def visit_Arel_Nodes_GroupingSet(o); end
  def visit_Arel_Nodes_Having(o); end
  def visit_Arel_Nodes_In(o); end
  def visit_Arel_Nodes_InnerJoin(o); end
  def visit_Arel_Nodes_InsertStatement(o); end
  def visit_Arel_Nodes_JoinSource(o); end
  def visit_Arel_Nodes_LessThan(o); end
  def visit_Arel_Nodes_LessThanOrEqual(o); end
  def visit_Arel_Nodes_Limit(o); end
  def visit_Arel_Nodes_Matches(o); end
  def visit_Arel_Nodes_Max(o); end
  def visit_Arel_Nodes_Min(o); end
  def visit_Arel_Nodes_NamedFunction(o); end
  def visit_Arel_Nodes_NamedWindow(o); end
  def visit_Arel_Nodes_Not(o); end
  def visit_Arel_Nodes_NotEqual(o); end
  def visit_Arel_Nodes_NotIn(o); end
  def visit_Arel_Nodes_Offset(o); end
  def visit_Arel_Nodes_On(o); end
  def visit_Arel_Nodes_Or(o); end
  def visit_Arel_Nodes_Ordering(o); end
  def visit_Arel_Nodes_OuterJoin(o); end
  def visit_Arel_Nodes_Over(o); end
  def visit_Arel_Nodes_Preceding(o); end
  def visit_Arel_Nodes_Range(o); end
  def visit_Arel_Nodes_RightOuterJoin(o); end
  def visit_Arel_Nodes_RollUp(o); end
  def visit_Arel_Nodes_Rows(o); end
  def visit_Arel_Nodes_SelectCore(o); end
  def visit_Arel_Nodes_SelectStatement(o); end
  def visit_Arel_Nodes_SqlLiteral(o); end
  def visit_Arel_Nodes_StringJoin(o); end
  def visit_Arel_Nodes_Sum(o); end
  def visit_Arel_Nodes_TableAlias(o); end
  def visit_Arel_Nodes_Top(o); end
  def visit_Arel_Nodes_UnqualifiedColumn(o); end
  def visit_Arel_Nodes_UpdateStatement(o); end
  def visit_Arel_Nodes_Values(o); end
  def visit_Arel_Nodes_Window(o); end
  def visit_Arel_Table(o); end
  def visit_Array(o); end
  def visit_BigDecimal(o); end
  def visit_Date(o); end
  def visit_DateTime(o); end
  def visit_FalseClass(o); end
  def visit_Fixnum(o); end
  def visit_Float(o); end
  def visit_Hash(o); end
  def visit_Integer(o); end
  def visit_NilClass(o); end
  def visit_Set(o); end
  def visit_String(o); end
  def visit_Symbol(o); end
  def visit_Time(o); end
  def visit_TrueClass(o); end
  def visit_edge(o, method); end
  def window(o); end
  def with_node(node); end
end

class Arel::Visitors::Dot::Edge < ::Struct; end

class Arel::Visitors::Dot::Node
  # @return [Node] a new instance of Node
  def initialize(name, id, fields = T.unsafe(nil)); end

  # Returns the value of attribute fields.
  def fields; end

  # Sets the attribute fields
  #
  # @param value the value to set the attribute fields to.
  def fields=(_arg0); end

  # Returns the value of attribute id.
  def id; end

  # Sets the attribute id
  #
  # @param value the value to set the attribute id to.
  def id=(_arg0); end

  # Returns the value of attribute name.
  def name; end

  # Sets the attribute name
  #
  # @param value the value to set the attribute name to.
  def name=(_arg0); end
end

class Arel::Visitors::IBM_DB < ::Arel::Visitors::ToSql
  private

  def visit_Arel_Nodes_Limit(o, collector); end
end

class Arel::Visitors::Informix < ::Arel::Visitors::ToSql
  private

  def visit_Arel_Nodes_Limit(o, collector); end
  def visit_Arel_Nodes_Offset(o, collector); end
  def visit_Arel_Nodes_SelectCore(o, collector); end
  def visit_Arel_Nodes_SelectStatement(o, collector); end
end

class Arel::Visitors::MSSQL < ::Arel::Visitors::ToSql
  # @return [MSSQL] a new instance of MSSQL
  def initialize(*_arg0); end

  private

  def determine_order_by(orders, x); end

  # FIXME raise exception of there is no pk?
  def find_left_table_pk(o); end

  def find_primary_key(o); end
  def get_offset_limit_clause(o); end
  def row_num_literal(order_by); end

  # @return [Boolean]
  def select_count?(x); end

  def visit_Arel_Nodes_DeleteStatement(o, collector); end
  def visit_Arel_Nodes_SelectStatement(o, collector); end

  # `top` wouldn't really work here. I.e. User.select("distinct first_name").limit(10) would generate
  # "select top 10 distinct first_name from users", which is invalid query! it should be
  # "select distinct top 10 first_name from users"
  def visit_Arel_Nodes_Top(o); end

  def visit_Arel_Visitors_MSSQL_RowNumber(o, collector); end
end

class Arel::Visitors::MSSQL::RowNumber < ::Struct
  # Returns the value of attribute children
  #
  # @return [Object] the current value of children
  def children; end

  # Sets the attribute children
  #
  # @param value [Object] the value to set the attribute children to.
  # @return [Object] the newly set value
  def children=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

class Arel::Visitors::MySQL < ::Arel::Visitors::ToSql
  private

  def visit_Arel_Nodes_Bin(o, collector); end
  def visit_Arel_Nodes_Concat(o, collector); end
  def visit_Arel_Nodes_SelectCore(o, collector); end

  # :'(
  # http://dev.mysql.com/doc/refman/5.0/en/select.html#id3482214
  def visit_Arel_Nodes_SelectStatement(o, collector); end

  def visit_Arel_Nodes_Union(o, collector, suppress_parens = T.unsafe(nil)); end
  def visit_Arel_Nodes_UpdateStatement(o, collector); end
end

class Arel::Visitors::Oracle < ::Arel::Visitors::ToSql
  private

  # Hacks for the order clauses specific to Oracle
  def order_hacks(o); end

  # Split string by commas but count opening and closing brackets
  # and ignore commas inside brackets.
  def split_order_string(string); end

  def visit_Arel_Nodes_BindParam(o, collector); end
  def visit_Arel_Nodes_Except(o, collector); end
  def visit_Arel_Nodes_Limit(o, collector); end
  def visit_Arel_Nodes_Offset(o, collector); end
  def visit_Arel_Nodes_SelectStatement(o, collector); end
  def visit_Arel_Nodes_UpdateStatement(o, collector); end
end

class Arel::Visitors::Oracle12 < ::Arel::Visitors::ToSql
  private

  def visit_Arel_Nodes_BindParam(o, collector); end
  def visit_Arel_Nodes_Except(o, collector); end
  def visit_Arel_Nodes_Limit(o, collector); end
  def visit_Arel_Nodes_Offset(o, collector); end
  def visit_Arel_Nodes_SelectOptions(o, collector); end
  def visit_Arel_Nodes_SelectStatement(o, collector); end
  def visit_Arel_Nodes_UpdateStatement(o, collector); end
end

class Arel::Visitors::PostgreSQL < ::Arel::Visitors::ToSql
  private

  # Utilized by GroupingSet, Cube & RollUp visitors to
  # handle grouping aggregation semantics
  def grouping_array_or_grouping_element(o, collector); end

  def visit_Arel_Nodes_BindParam(o, collector); end
  def visit_Arel_Nodes_Cube(o, collector); end
  def visit_Arel_Nodes_DistinctOn(o, collector); end
  def visit_Arel_Nodes_DoesNotMatch(o, collector); end
  def visit_Arel_Nodes_GroupingElement(o, collector); end
  def visit_Arel_Nodes_GroupingSet(o, collector); end
  def visit_Arel_Nodes_Matches(o, collector); end
  def visit_Arel_Nodes_NotRegexp(o, collector); end
  def visit_Arel_Nodes_Regexp(o, collector); end
  def visit_Arel_Nodes_RollUp(o, collector); end
end

Arel::Visitors::PostgreSQL::CUBE = T.let(T.unsafe(nil), String)
Arel::Visitors::PostgreSQL::GROUPING_SET = T.let(T.unsafe(nil), String)
Arel::Visitors::PostgreSQL::ROLLUP = T.let(T.unsafe(nil), String)

class Arel::Visitors::Reduce < ::Arel::Visitors::Visitor
  def accept(object, collector); end

  private

  def visit(object, collector); end
end

class Arel::Visitors::SQLite < ::Arel::Visitors::ToSql
  private

  def visit_Arel_Nodes_False(o, collector); end

  # Locks are not supported in SQLite
  def visit_Arel_Nodes_Lock(o, collector); end

  def visit_Arel_Nodes_SelectStatement(o, collector); end
  def visit_Arel_Nodes_True(o, collector); end
end

class Arel::Visitors::ToSql < ::Arel::Visitors::Reduce
  # @return [ToSql] a new instance of ToSql
  def initialize(connection); end

  def compile(node, &block); end

  private

  def aggregate(name, o, collector); end

  # FIXME: we should probably have a 2-pass visitor for this
  def build_subselect(key, o); end

  def collect_nodes_for(nodes, collector, spacer, connector = T.unsafe(nil)); end
  def column_cache(table); end
  def column_for(attr); end
  def infix_value(o, collector, value); end
  def inject_join(list, collector, join_str); end
  def literal(o, collector); end
  def maybe_visit(thing, collector); end
  def print_type_cast_deprecation; end
  def quote(value, column = T.unsafe(nil)); end
  def quote_column_name(name); end
  def quote_table_name(name); end
  def quoted(o, a); end
  def schema_cache; end

  # @return [Boolean]
  def table_exists?(name); end

  # @raise [UnsupportedVisitError]
  def unsupported(o, collector); end

  # @raise [UnsupportedVisitError]
  def visit_ActiveSupport_Multibyte_Chars(o, collector); end

  # @raise [UnsupportedVisitError]
  def visit_ActiveSupport_StringInquirer(o, collector); end

  def visit_Arel_Attributes_Attribute(o, collector); end
  def visit_Arel_Attributes_Boolean(o, collector); end
  def visit_Arel_Attributes_Decimal(o, collector); end
  def visit_Arel_Attributes_Float(o, collector); end
  def visit_Arel_Attributes_Integer(o, collector); end
  def visit_Arel_Attributes_String(o, collector); end
  def visit_Arel_Attributes_Time(o, collector); end
  def visit_Arel_Nodes_Addition(o, collector); end
  def visit_Arel_Nodes_And(o, collector); end
  def visit_Arel_Nodes_As(o, collector); end
  def visit_Arel_Nodes_Ascending(o, collector); end
  def visit_Arel_Nodes_Assignment(o, collector); end
  def visit_Arel_Nodes_Avg(o, collector); end
  def visit_Arel_Nodes_Between(o, collector); end
  def visit_Arel_Nodes_Bin(o, collector); end
  def visit_Arel_Nodes_BindParam(o, collector); end
  def visit_Arel_Nodes_Case(o, collector); end
  def visit_Arel_Nodes_Casted(o, collector); end
  def visit_Arel_Nodes_Count(o, collector); end
  def visit_Arel_Nodes_CurrentRow(o, collector); end
  def visit_Arel_Nodes_DeleteStatement(o, collector); end
  def visit_Arel_Nodes_Descending(o, collector); end
  def visit_Arel_Nodes_Distinct(o, collector); end

  # @raise [NotImplementedError]
  def visit_Arel_Nodes_DistinctOn(o, collector); end

  def visit_Arel_Nodes_Division(o, collector); end
  def visit_Arel_Nodes_DoesNotMatch(o, collector); end
  def visit_Arel_Nodes_Else(o, collector); end
  def visit_Arel_Nodes_Equality(o, collector); end
  def visit_Arel_Nodes_Except(o, collector); end
  def visit_Arel_Nodes_Exists(o, collector); end
  def visit_Arel_Nodes_Extract(o, collector); end
  def visit_Arel_Nodes_False(o, collector); end
  def visit_Arel_Nodes_Following(o, collector); end
  def visit_Arel_Nodes_FullOuterJoin(o, collector); end
  def visit_Arel_Nodes_GreaterThan(o, collector); end
  def visit_Arel_Nodes_GreaterThanOrEqual(o, collector); end
  def visit_Arel_Nodes_Group(o, collector); end
  def visit_Arel_Nodes_Grouping(o, collector); end
  def visit_Arel_Nodes_In(o, collector); end
  def visit_Arel_Nodes_InfixOperation(o, collector); end
  def visit_Arel_Nodes_InnerJoin(o, collector); end
  def visit_Arel_Nodes_InsertStatement(o, collector); end
  def visit_Arel_Nodes_Intersect(o, collector); end
  def visit_Arel_Nodes_JoinSource(o, collector); end
  def visit_Arel_Nodes_LessThan(o, collector); end
  def visit_Arel_Nodes_LessThanOrEqual(o, collector); end
  def visit_Arel_Nodes_Limit(o, collector); end
  def visit_Arel_Nodes_Lock(o, collector); end
  def visit_Arel_Nodes_Matches(o, collector); end
  def visit_Arel_Nodes_Max(o, collector); end
  def visit_Arel_Nodes_Min(o, collector); end
  def visit_Arel_Nodes_Multiplication(o, collector); end
  def visit_Arel_Nodes_NamedFunction(o, collector); end
  def visit_Arel_Nodes_NamedWindow(o, collector); end
  def visit_Arel_Nodes_Not(o, collector); end
  def visit_Arel_Nodes_NotEqual(o, collector); end
  def visit_Arel_Nodes_NotIn(o, collector); end

  # @raise [NotImplementedError]
  def visit_Arel_Nodes_NotRegexp(o, collector); end

  def visit_Arel_Nodes_Offset(o, collector); end
  def visit_Arel_Nodes_On(o, collector); end
  def visit_Arel_Nodes_Or(o, collector); end
  def visit_Arel_Nodes_OuterJoin(o, collector); end
  def visit_Arel_Nodes_Over(o, collector); end
  def visit_Arel_Nodes_Preceding(o, collector); end
  def visit_Arel_Nodes_Quoted(o, collector); end
  def visit_Arel_Nodes_Range(o, collector); end

  # @raise [NotImplementedError]
  def visit_Arel_Nodes_Regexp(o, collector); end

  def visit_Arel_Nodes_RightOuterJoin(o, collector); end
  def visit_Arel_Nodes_Rows(o, collector); end
  def visit_Arel_Nodes_SelectCore(o, collector); end
  def visit_Arel_Nodes_SelectOptions(o, collector); end
  def visit_Arel_Nodes_SelectStatement(o, collector); end
  def visit_Arel_Nodes_SqlLiteral(o, collector); end
  def visit_Arel_Nodes_StringJoin(o, collector); end
  def visit_Arel_Nodes_Subtraction(o, collector); end
  def visit_Arel_Nodes_Sum(o, collector); end
  def visit_Arel_Nodes_TableAlias(o, collector); end

  # FIXME: this does nothing on most databases, but does on MSSQL
  def visit_Arel_Nodes_Top(o, collector); end

  def visit_Arel_Nodes_True(o, collector); end
  def visit_Arel_Nodes_UnaryOperation(o, collector); end
  def visit_Arel_Nodes_Union(o, collector); end
  def visit_Arel_Nodes_UnionAll(o, collector); end
  def visit_Arel_Nodes_UnqualifiedColumn(o, collector); end
  def visit_Arel_Nodes_UpdateStatement(o, collector); end
  def visit_Arel_Nodes_Values(o, collector); end
  def visit_Arel_Nodes_When(o, collector); end
  def visit_Arel_Nodes_Window(o, collector); end
  def visit_Arel_Nodes_With(o, collector); end
  def visit_Arel_Nodes_WithRecursive(o, collector); end
  def visit_Arel_SelectManager(o, collector); end
  def visit_Arel_Table(o, collector); end
  def visit_Array(o, collector); end

  # @raise [UnsupportedVisitError]
  def visit_BigDecimal(o, collector); end

  def visit_Bignum(o, collector); end

  # @raise [UnsupportedVisitError]
  def visit_Class(o, collector); end

  # @raise [UnsupportedVisitError]
  def visit_Date(o, collector); end

  # @raise [UnsupportedVisitError]
  def visit_DateTime(o, collector); end

  # @raise [UnsupportedVisitError]
  def visit_FalseClass(o, collector); end

  def visit_Fixnum(o, collector); end

  # @raise [UnsupportedVisitError]
  def visit_Float(o, collector); end

  # @raise [UnsupportedVisitError]
  def visit_Hash(o, collector); end

  def visit_Integer(o, collector); end

  # @raise [UnsupportedVisitError]
  def visit_NilClass(o, collector); end

  def visit_Set(o, collector); end

  # @raise [UnsupportedVisitError]
  def visit_String(o, collector); end

  # @raise [UnsupportedVisitError]
  def visit_Symbol(o, collector); end

  # @raise [UnsupportedVisitError]
  def visit_Time(o, collector); end

  # @raise [UnsupportedVisitError]
  def visit_TrueClass(o, collector); end
end

Arel::Visitors::ToSql::AND = T.let(T.unsafe(nil), String)
Arel::Visitors::ToSql::COMMA = T.let(T.unsafe(nil), String)
Arel::Visitors::ToSql::DISTINCT = T.let(T.unsafe(nil), String)
Arel::Visitors::ToSql::GROUP_BY = T.let(T.unsafe(nil), String)
Arel::Visitors::ToSql::ORDER_BY = T.let(T.unsafe(nil), String)
Arel::Visitors::ToSql::SPACE = T.let(T.unsafe(nil), String)

# This is some roflscale crazy stuff.  I'm roflscaling this because
# building SQL queries is a hotspot.  I will explain the roflscale so that
# others will not rm this code.
#
# In YARV, string literals in a method body will get duped when the byte
# code is executed.  Let's take a look:
#
# > puts RubyVM::InstructionSequence.new('def foo; "bar"; end').disasm
#
#   == disasm: <RubyVM::InstructionSequence:foo@<compiled>>=====
#    0000 trace            8
#    0002 trace            1
#    0004 putstring        "bar"
#    0006 trace            16
#    0008 leave
#
# The `putstring` bytecode will dup the string and push it on the stack.
# In many cases in our SQL visitor, that string is never mutated, so there
# is no need to dup the literal.
#
# If we change to a constant lookup, the string will not be duped, and we
# can reduce the objects in our system:
#
# > puts RubyVM::InstructionSequence.new('BAR = "bar"; def foo; BAR; end').disasm
#
#  == disasm: <RubyVM::InstructionSequence:foo@<compiled>>========
#  0000 trace            8
#  0002 trace            1
#  0004 getinlinecache   11, <ic:0>
#  0007 getconstant      :BAR
#  0009 setinlinecache   <ic:0>
#  0011 trace            16
#  0013 leave
#
# `getconstant` should be a hash lookup, and no object is duped when the
# value of the constant is pushed on the stack.  Hence the crazy
# constants below.
#
# `matches` and `doesNotMatch` operate case-insensitively via Visitor subclasses
# specialized for specific databases when necessary.
Arel::Visitors::ToSql::WHERE = T.let(T.unsafe(nil), String)

Arel::Visitors::ToSql::WINDOW = T.let(T.unsafe(nil), String)

class Arel::Visitors::UnsupportedVisitError < ::StandardError
  # @return [UnsupportedVisitError] a new instance of UnsupportedVisitError
  def initialize(object); end
end

class Arel::Visitors::Visitor
  # @return [Visitor] a new instance of Visitor
  def initialize; end

  def accept(object); end

  private

  def dispatch; end
  def get_dispatch_cache; end
  def visit(object); end

  class << self
    def dispatch_cache; end
  end
end

class Arel::Visitors::WhereSql < ::Arel::Visitors::ToSql
  # @return [WhereSql] a new instance of WhereSql
  def initialize(inner_visitor, *args, &block); end

  private

  def visit_Arel_Nodes_SelectCore(o, collector); end
end

module Arel::WindowPredications
  def over(expr = T.unsafe(nil)); end
end
