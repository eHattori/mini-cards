# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/anyway_config/all/anyway_config.rbi
#
# anyway_config-2.3.0

module Anyway
  def self.env; end
  def self.loaders; end
end
module Anyway::Ext
end
module Anyway::Ext::DeepDup
end
module Anyway::Ext::DeepFreeze
end
module Anyway::Ext::Hash
end
module Anyway::Utils
  def self.deep_merge!(source, other); end
end
class Anyway::Settings
  def self.app_root; end
  def self.autoload_static_config_path; end
  def self.autoload_static_config_path=(val); end
  def self.autoloader; end
  def self.cleanup_autoload_paths; end
  def self.current_environment; end
  def self.current_environment=(arg0); end
  def self.default_config_path; end
  def self.default_config_path=(val); end
  def self.default_environmental_key; end
  def self.default_environmental_key=(arg0); end
  def self.default_environmental_key?; end
  def self.future; end
  def self.known_environments; end
  def self.known_environments=(arg0); end
  def self.tracing_enabled; end
  def self.tracing_enabled=(arg0); end
  def self.use_local_files; end
  def self.use_local_files=(arg0); end
end
class Anyway::Settings::Future
  def initialize; end
  def self.setting(name, default_value); end
  def self.settings; end
  def store; end
  def unwrap_known_environments; end
  def unwrap_known_environments=(val); end
  def use(*names); end
end
module Anyway::Tracing
  def self.accessor_source(location); end
  def self.capture; end
  def self.current_trace; end
  def self.current_trace_source; end
  def self.source_stack; end
  def self.trace!(type, *path, **opts); end
  def self.trace_stack; end
  def self.tracing?; end
  def self.with_trace_source(src); end
  def trace!(type, *path, **opts); end
end
class Anyway::Tracing::Trace
  def clear; end
  def dig(*, &); end
  def dup; end
  def initialize(type = nil, value = nil, **source); end
  def keep_if(*, &); end
  def merge!(another_trace); end
  def merge_values(hash, **opts); end
  def pretty_print(q); end
  def record_value(val, *path, **opts); end
  def source; end
  def to_h; end
  def trace?; end
  def type; end
  def value; end
end
class Anyway::OptionParserBuilder
  def self.call(options); end
  def self.option_parser_on_args(key, flag: nil, desc: nil, type: nil); end
end
module Anyway::OptparseConfig
  def option_parser; end
  def parse_options!(options); end
  def self.included(base); end
end
module Anyway::OptparseConfig::ClassMethods
  def describe_options(**hargs); end
  def extend_options(&block); end
  def flag_options(*args); end
  def ignore_options(*args); end
  def option_parser_descriptors; end
  def option_parser_extensions; end
  def option_parser_options; end
end
module Anyway::DynamicConfig
  def self.included(base); end
end
module Anyway::DynamicConfig::ClassMethods
  def for(name, auto_cast: nil, **options); end
end
class Anyway::Config
  def __trace__; end
  def __type_caster__; end
  def clear; end
  def config_name; end
  def deconstruct_keys(keys); end
  def dig(*keys); end
  def dup; end
  def env_prefix; end
  def initialize(overrides = nil); end
  def inspect; end
  def load(overrides = nil); end
  def load_from_sources(base_config, **options); end
  def pretty_print(q); end
  def raise_validation_error(msg); end
  def reload(overrides = nil); end
  def resolve_config_path(name, env_prefix); end
  def self.accessors_module; end
  def self.attr_config(*args, **hargs); end
  def self.build_config_name; end
  def self.coerce_types(mapping); end
  def self.coercion_mapping; end
  def self.config_attributes; end
  def self.config_name(val = nil); end
  def self.current_env; end
  def self.defaults; end
  def self.define_config_accessor(*names); end
  def self.disable_auto_cast!; end
  def self.env_prefix(val = nil); end
  def self.explicit_config_name; end
  def self.explicit_config_name?; end
  def self.fallback_type_caster(val = nil); end
  def self.filter_by_env(names, env); end
  def self.load_callbacks; end
  def self.names_with_exclude_env_option(names, env); end
  def self.new_empty_config; end
  def self.on_load(*names, &block); end
  def self.required(*names, env: nil); end
  def self.required_attributes; end
  def self.type_caster(val = nil); end
  def self.validate_param_names!(names); end
  def to_h; end
  def to_source_trace; end
  def validate_required_attributes!; end
  def values; end
  def write_config_attr(key, val); end
  extend Anyway::DynamicConfig::ClassMethods
  extend Anyway::OptparseConfig::ClassMethods
  extend Anyway::RBSGenerator
  include Anyway::DynamicConfig
  include Anyway::OptparseConfig
end
class Anyway::Config::Error < StandardError
end
class Anyway::Config::ValidationError < Anyway::Config::Error
end
class Anyway::Config::BlockCallback
  def apply_to(config); end
  def block; end
  def initialize(block); end
end
class Anyway::Config::NamedCallback
  def apply_to(config); end
  def initialize(name); end
  def name; end
end
module Anyway::AutoCast
  def self.call(val); end
  def self.cast_hash(obj); end
  def self.coerce(_key, val); end
end
module Anyway::NoCast
  def self.call(val); end
  def self.coerce(_key, val); end
end
class Anyway::TypeRegistry
  def accept(name_or_object, &block); end
  def deserialize(raw, type_id, array: nil); end
  def dup; end
  def initialize; end
  def registry; end
  def self.default; end
end
class Anyway::TypeCaster
  def coerce(key, val, config: nil); end
  def fallback; end
  def initialize(mapping, registry: nil, fallback: nil); end
  def mapping; end
  def registry; end
end
class Anyway::Env
  def clear; end
  def data; end
  def fetch(prefix); end
  def fetch_with_trace(prefix); end
  def initialize(type_cast: nil); end
  def parse_env(prefix); end
  def traces; end
  def type_cast; end
  include Anyway::Tracing
end
module Anyway::Loaders
end
class Anyway::Loaders::Base
  def initialize(local:); end
  def self.call(local: nil, **opts); end
  def use_local?; end
  include Anyway::Tracing
end
class Anyway::Loaders::YAML < Anyway::Loaders::Base
  def call(config_path:, **_options); end
  def config_with_env(config); end
  def environmental?(parsed_yml); end
  def load_base_yml(path); end
  def load_local_yml(path); end
  def local_config_path(path); end
  def parse_yml(path); end
  def relative_config_path(path); end
end
class Anyway::Loaders::Env < Anyway::Loaders::Base
  def call(env_prefix:, **_options); end
end
class Anyway::Loaders::Registry
  def append(id, handler = nil, &block); end
  def delete(id); end
  def each(&block); end
  def find(id); end
  def freeze; end
  def initialize; end
  def insert_after(another_id, id, handler = nil, &block); end
  def insert_at(index, id, handler); end
  def insert_before(another_id, id, handler = nil, &block); end
  def override(id, handler); end
  def prepend(id, handler = nil, &block); end
  def registry; end
end
module Anyway::RBSGenerator
  def to_rbs; end
end
module Anyway::Rails
end
module Anyway::Rails::Config
end
module Anyway::Rails::Config::ClassMethods
  def new_empty_config; end
end
module Anyway::Rails::Loaders
end
class Anyway::Rails::Loaders::YAML < Anyway::Loaders::YAML
end
class Anyway::Rails::Loaders::Secrets < Anyway::Loaders::Base
  def call(name:, **_options); end
  def secrets; end
end
class Anyway::Rails::Loaders::Credentials < Anyway::Loaders::Base
  def call(name:, **_options); end
  def credentials_path; end
  def local_credentials(name); end
end
class Anyway::Railtie < Rails::Railtie
end
