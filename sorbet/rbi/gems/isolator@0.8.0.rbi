# typed: strict

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `isolator` gem.
# Please instead update this file by running `bin/tapioca gem isolator`.

module Isolator
  extend ::Isolator::Isolate
  extend ::Isolator::Callbacks

  class << self
    def adapters; end

    # Returns the value of attribute backtrace_cleaner.
    def backtrace_cleaner; end

    # Sets the attribute backtrace_cleaner
    #
    # @param value the value to set the attribute backtrace_cleaner to.
    def backtrace_cleaner=(_arg0); end

    # Returns the value of attribute backtrace_length.
    def backtrace_length; end

    # Sets the attribute backtrace_length
    #
    # @param value the value to set the attribute backtrace_length to.
    def backtrace_length=(_arg0); end

    def clear_transactions!; end
    def config; end

    # @yield [config]
    def configure; end

    def current_transactions(connection_id = T.unsafe(nil)); end

    # Returns the value of attribute debug_enabled.
    def debug_enabled; end

    # Sets the attribute debug_enabled
    #
    # @param value the value to set the attribute debug_enabled to.
    def debug_enabled=(_arg0); end

    def decr_thresholds!; end
    def decr_transactions!(connection_id = T.unsafe(nil)); end

    # Returns the value of attribute default_connection_id.
    def default_connection_id; end

    # Sets the attribute default_connection_id
    #
    # @param value the value to set the attribute default_connection_id to.
    def default_connection_id=(_arg0); end

    # Returns the value of attribute default_threshold.
    def default_threshold; end

    # Sets the attribute default_threshold
    #
    # @param value the value to set the attribute default_threshold to.
    def default_threshold=(_arg0); end

    # Accepts block and disable Isolator within
    def disable; end

    def disable!; end

    # @return [Boolean]
    def disabled?; end

    # Accepts block and enable Isolator within
    def enable; end

    def enable!; end

    # @return [Boolean]
    def enabled?; end

    def incr_thresholds!; end
    def incr_transactions!(connection_id = T.unsafe(nil)); end
    def load_ignore_config(path); end
    def notify(exception:, backtrace:); end
    def set_connection_threshold(val, connection_id = T.unsafe(nil)); end
    def transactions_threshold(connection_id = T.unsafe(nil)); end
    def transactions_threshold=(val); end

    # @return [Boolean]
    def within_transaction?; end

    private

    def colorize_debug(msg); end
    def connection_threshold(connection_id); end
    def debug!(msg); end
    def extract_source_location(locations); end

    # Returns the value of attribute state.
    def state; end

    # Sets the attribute state
    #
    # @param value the value to set the attribute state to.
    def state=(_arg0); end
  end
end

# ActiveSupport notifications listener
# Used for ActiveRecord and ROM::SQL (when instrumentation is available)
module Isolator::ActiveSupportSubscriber
  class << self
    def subscribe!(event); end
  end
end

Isolator::ActiveSupportSubscriber::FINISH_PATTERN = T.let(T.unsafe(nil), Regexp)
Isolator::ActiveSupportSubscriber::START_PATTERN = T.let(T.unsafe(nil), Regexp)

# Builds adapter from provided params
module Isolator::AdapterBuilder
  class << self
    def add_patch_method(adapter, base, method_name); end
    def call(target: T.unsafe(nil), method_name: T.unsafe(nil), **options); end
  end
end

module Isolator::Adapters; end

# Used as a "template" for adapters
module Isolator::Adapters::Base
  # Returns the value of attribute details_message.
  def details_message; end

  # Sets the attribute details_message
  #
  # @param value the value to set the attribute details_message to.
  def details_message=(_arg0); end

  def disable!; end

  # @return [Boolean]
  def disabled?; end

  def enable!; end

  # @return [Boolean]
  def enabled?; end

  # Returns the value of attribute exception_class.
  def exception_class; end

  # Sets the attribute exception_class
  #
  # @param value the value to set the attribute exception_class to.
  def exception_class=(_arg0); end

  # Returns the value of attribute exception_message.
  def exception_message; end

  # Sets the attribute exception_message
  #
  # @param value the value to set the attribute exception_message to.
  def exception_message=(_arg0); end

  def ignore_if(&block); end

  # @return [Boolean]
  def ignored?(*args); end

  def ignores; end
  def notify(backtrace, obj, *args); end

  # @return [Boolean]
  def notify?(*args); end

  private

  def build_exception(obj, args); end
end

class Isolator::BackgroundJobError < ::Isolator::UnsafeOperationError; end
Isolator::BackgroundJobError::MESSAGE = T.let(T.unsafe(nil), String)

# Add before_isolate and after_isolate callbacks
module Isolator::Callbacks
  def after_isolate(&block); end
  def after_isolate_callbacks; end
  def before_isolate(&block); end
  def before_isolate_callbacks; end
  def finish!; end
  def start!; end
end

# Isolator configuration:
#
# - `raise_exceptions` - whether to raise an exception in case of offense;
#   defaults to true in test env and false otherwise.
#   NOTE: env is inferred from RACK_ENV and RAILS_ENV.
#
# - `logger` - logger instance (nil by default)
#
# - `send_notifications` - whether to send notifications (through uniform_notifier);
#   defaults to false
#
# - `backtrace_filter` - define a custom backtrace filtering (provide a callable)
#
# - `ignorer` - define a custom ignorer (must implement .prepare)
class Isolator::Configuration
  # @return [Configuration] a new instance of Configuration
  def initialize; end

  # Returns the value of attribute backtrace_filter.
  def backtrace_filter; end

  # Sets the attribute backtrace_filter
  #
  # @param value the value to set the attribute backtrace_filter to.
  def backtrace_filter=(_arg0); end

  # Returns the value of attribute ignorer.
  def ignorer; end

  # Sets the attribute ignorer
  #
  # @param value the value to set the attribute ignorer to.
  def ignorer=(_arg0); end

  # Returns the value of attribute logger.
  def logger; end

  # Sets the attribute logger
  #
  # @param value the value to set the attribute logger to.
  def logger=(_arg0); end

  # Returns the value of attribute raise_exceptions.
  def raise_exceptions; end

  # Sets the attribute raise_exceptions
  #
  # @param value the value to set the attribute raise_exceptions to.
  def raise_exceptions=(_arg0); end

  # Returns the value of attribute raise_exceptions.
  def raise_exceptions?; end

  # Returns the value of attribute send_notifications.
  def send_notifications; end

  # Sets the attribute send_notifications
  #
  # @param value the value to set the attribute send_notifications to.
  def send_notifications=(_arg0); end

  # Returns the value of attribute send_notifications.
  def send_notifications?; end

  # @return [Boolean]
  def test_env?; end
end

class Isolator::HTTPError < ::Isolator::UnsafeOperationError; end
Isolator::HTTPError::MESSAGE = T.let(T.unsafe(nil), String)

# Handle ignoring isolator errors using a yml file
class Isolator::Ignorer
  class << self
    def prepare(path: T.unsafe(nil), regex_string: T.unsafe(nil)); end
  end
end

class Isolator::Ignorer::AdapterIgnore
  # @return [AdapterIgnore] a new instance of AdapterIgnore
  def initialize(adapter:, ignored_paths:, regex_string:); end

  def prepare; end

  private

  # Returns the value of attribute adapter.
  def adapter; end

  # Sets the attribute adapter
  #
  # @param value the value to set the attribute adapter to.
  def adapter=(_arg0); end

  # Returns the value of attribute ignored_paths.
  def ignored_paths; end

  # Sets the attribute ignored_paths
  #
  # @param value the value to set the attribute ignored_paths to.
  def ignored_paths=(_arg0); end

  def ignores; end
  def regex; end

  # Returns the value of attribute regex_string.
  def regex_string; end

  # Sets the attribute regex_string
  #
  # @param value the value to set the attribute regex_string to.
  def regex_string=(_arg0); end
end

Isolator::Ignorer::TODO_PATH = T.let(T.unsafe(nil), String)

# Add .isolate function to build and register adapters
module Isolator::Isolate
  def isolate(id, **options); end
end

class Isolator::MailerError < ::Isolator::UnsafeOperationError; end
Isolator::MailerError::MESSAGE = T.let(T.unsafe(nil), String)

# Wrapper over different notifications methods (exceptions, logging, uniform notifier)
class Isolator::Notifier
  # @return [Notifier] a new instance of Notifier
  def initialize(exception, backtrace = T.unsafe(nil)); end

  # Returns the value of attribute backtrace.
  def backtrace; end

  # @raise [exception.class]
  def call; end

  # Returns the value of attribute exception.
  def exception; end

  private

  def filtered_backtrace; end
  def log_exception; end

  # @return [Boolean]
  def raise_exceptions?; end

  def send_notifications; end

  # @return [Boolean]
  def send_notifications?; end

  # @return [Boolean]
  def uniform_notifier_loaded?; end
end

class Isolator::Railtie < ::Rails::Railtie; end

# Hash with key accessors
class Isolator::SimpleHashie < ::Hash
  def method_missing(key, *args, &block); end

  private

  # @return [Boolean]
  def respond_to_missing?(key); end
end

module Isolator::ThreadFetch; end

class Isolator::ThreadStateProxy
  def [](key); end
  def []=(key, value); end
  def initilize(prefix = T.unsafe(nil)); end

  # Returns the value of attribute prefix.
  def prefix; end
end

class Isolator::UnsafeOperationError < ::StandardError
  # @return [UnsafeOperationError] a new instance of UnsafeOperationError
  def initialize(msg = T.unsafe(nil), details: T.unsafe(nil)); end
end

Isolator::UnsafeOperationError::MESSAGE = T.let(T.unsafe(nil), String)
Isolator::VERSION = T.let(T.unsafe(nil), String)
