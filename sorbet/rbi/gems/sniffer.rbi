# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/sniffer/all/sniffer.rbi
#
# sniffer-0.5.0

module Sniffer
  def self.clear!; end
  def self.config; end
  def self.configure; end
  def self.data; end
  def self.disable!; end
  def self.enable!; end
  def self.enabled?; end
  def self.notify_response(data_item); end
  def self.reset!; end
  def self.store(*args, &block); end
end
module Sniffer::Middleware
end
class Sniffer::Middleware::Entry
  def initialize(klass, *args); end
  def klass; end
  def make_new; end
end
class Sniffer::Middleware::Chain
  def add(klass, *args); end
  def each(&block); end
  def entries; end
  def invoke_request(*args); end
  def invoke_response(*args); end
  def remove(klass); end
  include Enumerable
end
class Sniffer::Middleware::Logger
  def initialize(logger, severity); end
  def logger; end
  def request(_data_item); end
  def response(data_item); end
  def severity; end
end
class Sniffer::Config < Anyway::Config
  def capacity; end
  def capacity?; end
  def enabled?; end
  def middleware; end
  def rotate?; end
  def store?; end
  include Anonymous_Module_34
end
module Anonymous_Module_34
  def enabled; end
  def enabled=(val); end
  def log; end
  def log=(val); end
  def logger; end
  def logger=(val); end
  def severity; end
  def severity=(val); end
  def store; end
  def store=(val); end
  def url_blacklist; end
  def url_blacklist=(val); end
  def url_whitelist; end
  def url_whitelist=(val); end
end
module Sniffer::RequestPolicy
  def self.blacklist_url?(url); end
  def self.call(request); end
  def self.config; end
  def self.whitelist_url?(url); end
end
class Sniffer::DataItem
  def allowed_to_sniff?; end
  def request=(arg0); end
  def response=(arg0); end
  def to_h; end
  def to_json(*_args); end
  def to_log; end
  extend Dry::Initializer
  include Anonymous_Module_35
  include Dry::Initializer::Mixin::Root
end
module Anonymous_Module_35
  def __dry_initializer_config__; end
  def __dry_initializer_initialize__(*arg0, **__dry_initializer_options__); end
  def request; end
  def response; end
  extend Dry::Initializer::Mixin::Local
end
class Sniffer::DataItem::HttpObject
  def log_message; end
  def log_settings; end
  extend Dry::Initializer
  include Anonymous_Module_36
  include Dry::Initializer::Mixin::Root
end
module Anonymous_Module_36
  def __dry_initializer_config__; end
  def __dry_initializer_initialize__(*arg0); end
  extend Dry::Initializer::Mixin::Local
end
module Anonymous_Module_37
  def __dry_initializer_config__; end
  def __dry_initializer_initialize__(*arg0, **__dry_initializer_options__); end
  def body; end
  def headers; end
  def host; end
  def method; end
  def port; end
  def query; end
  extend Dry::Initializer::Mixin::Local
end
class Sniffer::DataItem::Request < Sniffer::DataItem::HttpObject
  def body=(arg0); end
  def headers=(arg0); end
  def host=(arg0); end
  def method=(arg0); end
  def port=(arg0); end
  def query=(arg0); end
  def to_h; end
  def to_log; end
  include Anonymous_Module_37
end
module Anonymous_Module_38
  def __dry_initializer_config__; end
  def __dry_initializer_initialize__(*arg0, **__dry_initializer_options__); end
  def body; end
  def headers; end
  def status; end
  def timing; end
  extend Dry::Initializer::Mixin::Local
end
class Sniffer::DataItem::Response < Sniffer::DataItem::HttpObject
  def body=(arg0); end
  def headers=(arg0); end
  def status=(arg0); end
  def timing=(arg0); end
  def to_h; end
  def to_log; end
  include Anonymous_Module_38
end
class Sniffer::Data < Array
  def config; end
  def overflow?; end
  def rotate(data_item); end
  def store(data_item); end
end
module Sniffer::Adapters
end
module Sniffer::Adapters::NetHttpAdapter
  def request_sniffer_after(data_item, benchmark); end
  def request_sniffer_before(req); end
  def request_with_sniffer(req, body = nil, &block); end
end
module Sniffer::Adapters::NetHttpAdapter::Prepend
  def request(req, body = nil, &block); end
  include Sniffer::Adapters::NetHttpAdapter
end
class Net::HTTP < Net::Protocol
  def request_without_sniffer(req, body = nil, &block); end
  include Sniffer::Adapters::NetHttpAdapter
end
module Sniffer::Adapters::HTTPClientAdapter
  def do_get_block_sniffer_after(data_item, conn, benchmark); end
  def do_get_block_sniffer_before(req); end
  def do_get_block_with_sniffer(req, proxy, conn, &block); end
end
module Sniffer::Adapters::HTTPClientAdapter::Prepend
  def do_get_block(req, proxy, conn, &block); end
  include Sniffer::Adapters::HTTPClientAdapter
end
module Sniffer::Adapters::HTTPAdapter
  def request_with_sniffer(verb, uri, opts = nil); end
end
module Sniffer::Adapters::HTTPAdapter::Prepend
  def request(*args); end
  include Sniffer::Adapters::HTTPAdapter
end
module Sniffer::Adapters::PatronAdapter
  def request_sniffer_after(data_item, benchmark); end
  def request_sniffer_before(action_name, url, headers, options); end
  def request_with_sniffer(action_name, url, headers, options = nil); end
end
module Sniffer::Adapters::PatronAdapter::Prepend
  def request(action_name, url, headers, options = nil); end
  include Sniffer::Adapters::PatronAdapter
end
module Sniffer::Adapters::CurlAdapter
  def data_item; end
  def http_post_with_sniffer(*args); end
  def http_with_sniffer(verb); end
  def sniffer_request(verb, *args); end
  def sniffer_response(timing); end
end
module Sniffer::Adapters::CurlAdapter::Prepend
  def http(verb); end
  def http_post(*args); end
  include Sniffer::Adapters::CurlAdapter
end
module Sniffer::Adapters::EthonAdapter
end
module Sniffer::Adapters::EthonAdapter::Http
  def http_request_with_sniffer(url, action_name, options = nil); end
  def make_sniffer_request(url, action_name, options); end
end
module Sniffer::Adapters::EthonAdapter::Http::Prepend
  def http_request(url, action_name, options = nil); end
  include Sniffer::Adapters::EthonAdapter::Http
end
module Sniffer::Adapters::EthonAdapter::Operations
  def perform_with_sniffer; end
end
module Sniffer::Adapters::EthonAdapter::Operations::Prepend
  def perform; end
  include Sniffer::Adapters::EthonAdapter::Operations
end
module Sniffer::Adapters::EventMachineAdapter
end
module Sniffer::Adapters::EventMachineAdapter::Client
  def on_body_data_sniffer(data); end
  def on_body_data_with_sniffer(data); end
  def parse_response_header_sniffer(header, _version, status); end
  def parse_response_header_with_sniffer(header, version, status); end
  def send_request_sniffer(_head, _body); end
  def send_request_with_sniffer(head, body); end
end
module Sniffer::Adapters::EventMachineAdapter::Client::Prepend
  def on_body_data(data); end
  def parse_response_header(header, version, status); end
  def send_request(head, body); end
  include Sniffer::Adapters::EventMachineAdapter::Client
end
module Sniffer::Adapters::ExconAdapter
  def request_sniffer_after(_params, benchmark, data_item); end
  def request_sniffer_before(params); end
  def request_with_sniffer(params = nil, &block); end
end
module Sniffer::Adapters::ExconAdapter::Prepend
  def request(params = nil, &block); end
  include Sniffer::Adapters::ExconAdapter
end
